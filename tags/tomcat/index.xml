<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tomcat on Adam.Blog()</title>
    <link>http://adampresley.com/tags/tomcat/</link>
    <description>Recent content in Tomcat on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jun 2010 12:45:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/tomcat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#39;Tomcat vs JRun: JVM Arguments&#39;</title>
      <link>http://adampresley.com/post/tomcat-vs-jrun-jvm-arguments/</link>
      <pubDate>Wed, 02 Jun 2010 12:45:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/tomcat-vs-jrun-jvm-arguments/</guid>
      <description>&lt;p&gt;Lately I have been learning more about running ColdFusion applications
in JEE application servers and servlet containers. The product I have
focused on primarily is &lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;Apache&amp;rsquo;s Tomcat&lt;/a&gt;, a
very free, open source, and scalable JEE platform. So far I have enjoyed
the experience.&lt;/p&gt;

&lt;p&gt;However recently I have been asked to do some performance testing on
various portions of the application I work on for my day job. And today
I came across disturbing results. JRun was actually performing
&lt;strong&gt;faster&lt;/strong&gt; than Tomcat! Eeep! This seemed to me a travesty
considering the age and lack of support for the JRun product.&lt;/p&gt;

&lt;p&gt;So originally my JVM arguments looked like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;set JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseConcMarkSweepGC -XX:GCTimeRatio=19
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically this is telling Tomcat to run with a minimum heap size of
256MB, a maximum heap size of 512MB, use the concurrent sweep garbage
collector. The &lt;em&gt;-XX:GCTimeRatio&lt;/em&gt; argument tells the JVM to have a goal
of spending 5% of its time on garbage collection, the remaining being
devoted to application time. With this configuration I was finding JRun
to be the faster server. Why??&lt;/p&gt;

&lt;p&gt;Then I noticed a little parameter in my JRun JVM configuration,
&lt;strong&gt;-server&lt;/strong&gt;. After a little searching I have found that the HotSpot
JVM has two modes of operation: &lt;strong&gt;-client&lt;/strong&gt; and &lt;strong&gt;-server&lt;/strong&gt;. The
difference appears to be how the memory manager and compiler optimizes
memory and class compiling/instantiation. For the client configuration
it apparently optimizes speed more toward new generation objects, while
the server configuration flag optimized for better perm generation
management.&lt;/p&gt;

&lt;p&gt;For the application I was working on this made a big difference! Adding
that flag to my JVM arguments enhanced performance in Tomcat for this
app, and made me much happier! So now my JVM argument setting in
&lt;em&gt;catalina.bat&lt;/em&gt; looks like this.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;set JAVA_OPTS=-server -Xms256m -Xmx512m -XX:+UseConcMarkSweepGC -XX:GCTimeRatio=19
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>