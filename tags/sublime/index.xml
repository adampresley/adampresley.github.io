<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sublime on Adam.Blog()</title>
    <link>http://adampresley.com/tags/sublime/</link>
    <description>Recent content in Sublime on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Oct 2014 20:30:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/sublime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing Your First Sublime Plugin [link]</title>
      <link>http://adampresley.com/post/writing-your-first-sublime-plugin/</link>
      <pubDate>Wed, 22 Oct 2014 20:30:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/writing-your-first-sublime-plugin/</guid>
      <description>&lt;p&gt;Earlier this year I wrote a guest post for the web site &lt;a href=&#34;sublimetexttips.com&#34;&gt;sublimetexttips.com&lt;/a&gt;. This post walks you through your first time writing a plugin for Sublime Text, the most superb text and code editor. Sublime plugins are written in Python. If you&amp;rsquo;ve never written any Python before don&amp;rsquo;t let it stop you. Python is an easy language to get into and you will find the experience most rewarding. So if you&amp;rsquo;ve ever considered writing your own plugin for Sublime Text read my article over at &lt;a href=&#34;http://sublimetexttips.com/sublime-plugins-101-how-to-write-your-own-html5-template-plugin/&#34;&gt;http://sublimetexttips.com/sublime-plugins-101-how-to-write-your-own-html5-template-plugin/&lt;/a&gt;. Cheers, and happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Only Saving When File Is Modified</title>
      <link>http://adampresley.com/post/only-saving-when-file-is-modified/</link>
      <pubDate>Thu, 15 May 2014 13:48:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/only-saving-when-file-is-modified/</guid>
      <description>&lt;p&gt;I got a ticket the other day questioning why my Sublime Text &lt;a href=&#34;https://github.com/adampresley/sublime-view-in-browser&#34;&gt;View In Browser&lt;/a&gt; plugin saves the file they are viewing every time the plugin is used. The answer of course is because it must be saved prior to opening in the browser. However the poster of the ticket did have a good point. There is no need to save the user&amp;rsquo;s file if the file hasn&amp;rsquo;t actually changed. I have pushed a modification to the plugin to ensure that the save only occurs if the user&amp;rsquo;s file has any modifications.&lt;/p&gt;

&lt;p&gt;To do this in Sublime&amp;rsquo;s API turned out to be very simple.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;is_dirty():&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;window()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;run_command(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;save&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;view&lt;/em&gt; object gives my plugin insight into the current view, or file being worked on. Sublime provides a nice method named &lt;strong&gt;is_dirty()&lt;/strong&gt; which will tell me if the current view has any pending modifications. If it does I perform the save command. If not the rest of the plugin runs and your file is opened in your browser of choice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>July Updates for Sublime Text View In Browser Plugin</title>
      <link>http://adampresley.com/post/july-updates-for-sublime-text-view-in-browser-plugin/</link>
      <pubDate>Tue, 02 Jul 2013 13:13:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/july-updates-for-sublime-text-view-in-browser-plugin/</guid>
      <description>&lt;p&gt;As some of you may know I wrote and maintain a plugin for the popular
and excellent &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text 2&lt;/a&gt; text editor
called &lt;a href=&#34;http://adampresley.github.io/sublime-view-in-browser/&#34;&gt;View In Browser&lt;/a&gt;.
To date this is my most popular plugin with 10 forks and 30 stars. Not
much compared to some but I am proud that a few folks have found it
useful.&lt;/p&gt;

&lt;p&gt;So here is a quick blog blurb to say that I&amp;rsquo;ve created a wiki for this
plugin. This wiki covers installation, how to configure the plugin to
user your favorite browser and answers common questions on how to get it
to use your local server environment. Also the home page has a facelift
and is no longer just an HTML copy of the README. Just a little nicer,
or at least I think so. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://s3.amazonaws.com/www.adampresley.com/posts/view-in-browser-updates-07-01-2013.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Sublime Plugin: Compare&#39;</title>
      <link>http://adampresley.com/post/sublime-plugin-compare/</link>
      <pubDate>Tue, 08 Nov 2011 19:51:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/sublime-plugin-compare/</guid>
      <description>&lt;p&gt;Not one to be completely happy with all existing features I found the
diff tool in Sublime Text 2 to be&amp;hellip; lacking. The built in diff tool
allows you to select two files in the folder explorer, right click and
choose &lt;em&gt;Diff Files&lt;/em&gt;. This action will produce a unified diff output.&lt;/p&gt;

&lt;p&gt;I, however, would like to have a way to use a graphical diff tool,
because I&amp;rsquo;m way too lazy to read the unified diff. So I decided to write
a plugin for Sublime. This plugin will allow me to map a key to run a
command that will compare the current tab&amp;rsquo;s content with the contents of
the tab to the right. Let&amp;rsquo;s walk through what that looks like. By the
way, plugins are written in Python.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s get the boilerplate stuff out of the way. We&amp;rsquo;ll need to
import some stuff and create a class that extends a built in Sublime
class that will allow us to create a plugin.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sublime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sublime_pluginimport&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocessfrom&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Template&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CompareCommand&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(sublime_plugin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TextCommand):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to define the &lt;strong&gt;run()&lt;/strong&gt;method. The first argument is a
reference to &lt;em&gt;self&lt;/em&gt;, followed by the edit environment, and an argument
called &lt;em&gt;command&lt;/em&gt;, which will be an string containing the path to the
diff tool to run, and placeholders for the left and right file names.
More on that later when we map our new command to a key.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;edit,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;command):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first task is to write two methods. The first will identify the
current buffer, or tab, we are working on when our plugin executes. The
second method will identify the buffer directly to the right. These
files will make up the left and right files to send to a diff tool.This
task is done by first getting the current view&amp;rsquo;s ID, then looping over
all open views and finding the tab adjacent to our open one.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__getCurrentBufferInfo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id(),&lt;/span&gt;
			&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file_name()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__getNextBufferInfo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer):&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;found&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;window()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;views():&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;found:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
					&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id(),&lt;/span&gt;
					&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file_name()&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

				&lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

			&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;found&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we have the two file names we are going to compare let&amp;rsquo;s open up
the specified diff tool and pass the files in. Our command in the key
mapping will define a string, and there will be two variables in there:
&lt;strong&gt;$leftFile&lt;/strong&gt;and &lt;strong&gt;$rightFile&lt;/strong&gt;. To fill in the variables we will use
the &lt;strong&gt;Template&lt;/strong&gt;class. Once our string is filled in with file names we
will use the &lt;strong&gt;Subprocess&lt;/strong&gt;class to execute. If there are any errors
they will be output to the Sublime console. Here is the entire listing.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sublime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sublime_plugin&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Template&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CompareCommand&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(sublime_plugin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TextCommand):&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;edit,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;command):&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;__getCurrentBufferInfo()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;nextBuffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;__getNextBufferInfo(currentBuffer)&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
		&lt;span style=&#34;color: #75715e&#34;&gt;# Compare the contents of the current buffer with the&lt;/span&gt;
		&lt;span style=&#34;color: #75715e&#34;&gt;# contents of the next buffer (if there is one).&lt;/span&gt;
		&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;processCommand&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nextBuffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;processCommand&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Template(command)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;substitute(leftFile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rightFile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nextBuffer[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;processCommand&lt;/span&gt;

			&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
			&lt;span style=&#34;color: #75715e&#34;&gt;# Execute the command. Capture output on STDOUT, and write it out&lt;/span&gt;
			&lt;span style=&#34;color: #75715e&#34;&gt;# to Sublime&amp;#39;s console.&lt;/span&gt;
			&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen(processCommand,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;shell&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stderr&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STDOUT)&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readlines():&lt;/span&gt;
				&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt;

			&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;wait()&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Return code: %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(ret)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__getCurrentBufferInfo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id(),&lt;/span&gt;
			&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file_name()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__getNextBufferInfo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer):&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;found&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;window()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;views():&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;found:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
					&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id(),&lt;/span&gt;
					&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fileName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file_name()&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

				&lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

			&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer_id()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentBuffer[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;found&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we can define a key mapping to be able to call our nifty plugin.
Here is an example of a key mapping using the Meld diff tool in Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ctrl+shift+c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;compare&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/usr/bin/meld &amp;#39;$leftFile&amp;#39; &amp;#39;$rightFile&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you take the code above and save it in the Packages/User directory as
&lt;strong&gt;CompareCommand.py&lt;/strong&gt;, and modify your user key mappings as shown above,
you should be able to hit CTRL+SHIFT+C and compare two files.&lt;/p&gt;

&lt;p&gt;Not perfect, but was fun to write, and will prove useful for me until
the folks at Sublime put a full feature in and replace the need for this
plugin. Happy coding!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>