<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regex on Adam.Blog()</title>
    <link>http://adampresley.com/tags/regex/</link>
    <description>Recent content in Regex on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Aug 2010 12:37:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding Namespaces to HTML Tag Using Regular Expressions</title>
      <link>http://adampresley.com/post/adding-namespaces-to-html-tag-using-regular-expressions/</link>
      <pubDate>Wed, 25 Aug 2010 12:37:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/adding-namespaces-to-html-tag-using-regular-expressions/</guid>
      <description>&lt;p&gt;My friend, &lt;a href=&#34;http://stevegood.org&#34;&gt;Mr. Steve Good&lt;/a&gt;, approached me about a problem he was
having where he needed to add a namespace to an HTML tag at runtime.
Essentially he was parsing some dynamic HTML and wished to inject an
additional namespace into the HTML declaration. Regular expressions to
the rescue! The first test I ran was with a blank &lt;HTML&gt; tag. For this
example I will be injecting the SVG, or Scalable Vector Graphics
namespace. To accomplish this in ColdFusion we simply are using the
&lt;strong&gt;replaceAll&lt;/strong&gt; method against the &lt;strong&gt;String&lt;/strong&gt; class in Java.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;old&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;html&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot; /&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;old.replaceAll&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;(?i)(?&amp;lt;=&amp;lt;html)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot;, &amp;quot;$1 xmlns:svg=&amp;quot;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;quot;&amp;gt;&amp;quot;) /&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfdump&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#new#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next task was to ensure that if the HTML tag already had a namespace
our regex won&amp;rsquo;t erase it, but will instead append the new namespace to
it. Let&amp;rsquo;s see that code.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;old&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;html xmlns=&amp;quot;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot; /&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;old.replaceAll&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;(?i)(?&amp;lt;=&amp;lt;html)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&amp;quot;, &amp;quot;$1 xmlns:svg=&amp;quot;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;quot;&amp;gt;&amp;quot;) /&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfdump&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#new#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I love me some regular expressions. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Specific Text in a String using ColdFusion and Java</title>
      <link>http://adampresley.com/post/finding-specific-text-in-a-string-using-coldfusion-and-java/</link>
      <pubDate>Wed, 15 Jul 2009 17:24:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/finding-specific-text-in-a-string-using-coldfusion-and-java/</guid>
      <description>&lt;p&gt;A question was posted on the Dallas/Ft. Worth ColdFusion User Group
today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m trying to parse a text file to find a particular string, then
extract that string and approximately 100 characters past that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I&amp;rsquo;ve cooked up a little code sample that uses the Java regular
expressions classes. The ColdFusion regular expression methods are quite
nice, and will serve most purposes, but for tasks like this where I have
to run a regex pattern repeatedly speed is important. Especially if you
are working over a large file of data, for example.&lt;/p&gt;

&lt;p&gt;So what I&amp;rsquo;ve done is use the &lt;strong&gt;java.util.regex.Pattern&lt;/strong&gt; class and the
&lt;strong&gt;java.util.regex.Matcher&lt;/strong&gt; class to do the job. The &lt;strong&gt;Pattern&lt;/strong&gt;
class allows you to compile a regular expression string you intend to
use over and over, as well as setup some options on how the regex engine
is to behave.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Matcher&lt;/strong&gt; class allows you to iteratively match the pattern
against a string, allowing you to find multiple matches, one at a time.
So what you do is ask the matcher if you have any more string to search,
and if you do, tell it to find the next match. If it finds a new match
you can retrieve information about what the start and end positions of
the match are, and more. So let&amp;rsquo;s see that in action.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;haystack&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello. My name is Adam. It is nice to meet you. How are you? This is an example of a regex &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;that finds something specific as a string to start, then followed by 100 or so characters. How many &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;will we have? I am a giant noob who is writing lengthy text to try and see if we&amp;#39;ve hit our &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;something specific threshold. Now we should have two matches.&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!---&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    Create the pattern. The compiled pattern&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    needs to be case insensitive, and dot matches&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    all.&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;    See: http://72.5.124.55/javase/6/docs/api/java/util/regex/Pattern.html&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;---&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patternObj&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;createObject&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;java&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;java.util.regex.Pattern&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matchStart&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;something\sspecific&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pattern&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;patternObj.compile&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;(#matchStart#.{1,100})&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;bitor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(patternObj.CASE_INSENSITIVE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patternObj.DOTALL)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!---&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    Get a matcher object to match our pattern against&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    our input.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;---&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pattern.matcher&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(haystack)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!---&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    Continue matching till we have no more matches.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    When we find a match get the start, end, and value&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    of the match.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;---&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfloop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!matcher.hitEnd()&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfif&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;matcher.find&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;local[index]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;matcher.start&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(),&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;matcher.end&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(),&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;haystack.subsequence&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;matcher.start&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;matcher.end&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/cfif&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/cfloop&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfdump&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#local#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see at the beginning I am simply setting up a large string
with our data to search against. From here we create a pattern object,
followed by what our starting match criteria is. So the variable
&lt;strong&gt;matchStart&lt;/strong&gt; is what string we wish to start the match with. From
here we use the &lt;em&gt;compile&lt;/em&gt; method to compile the regular expression. In
this method the second argument is taking two integers,
CASE_INSENSITIVE and DOTALL and ORing the together. This tells the
pattern that we don&amp;rsquo;t care about case, and the DOT character in the
regex matches all lines.&lt;/p&gt;

&lt;p&gt;After this we ask the pattern for a matcher object, telling it also that
we wish to work against the haystack string. What we then do with it is
to loop until the matcher tells us we&amp;rsquo;ve hit the end of our search
string, as seen on line 35.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;find&lt;/em&gt; method asks the matcher to search the haystack for our regex
match. If we have a successful match (because &lt;em&gt;find&lt;/em&gt; returns boolean),
we want to get the start and end positions, as well as the matched
value, and stuff them into a structure, and place that structure into an
array.&lt;/p&gt;

&lt;p&gt;From here you will have an array of matches, their start and end
offsets, that you may then use to your heart&amp;rsquo;s content. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL Formatted Revisited</title>
      <link>http://adampresley.com/post/sql-formatted-revisited/</link>
      <pubDate>Wed, 08 Apr 2009 11:30:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/sql-formatted-revisited/</guid>
      <description>&lt;p&gt;I posted an entry yesterday about using a regular expression to reformat
SQL queries in code. After a bit more exploring and playing around in
RegexBuddy (wonderful tool) I came up with a better regular expression
to do the job. This version accounts for the last column much better
than the previous expression I tried. So, giving a query like the
following we can apply a search and replace using the following regular
expression: &lt;strong&gt;&lt;em&gt;(\s*)(.+)(?=,|(?&amp;lt;!,)\x0D\x0A|\z),?&lt;/em&gt;&lt;/strong&gt;. We then
specify our replace string as&lt;strong&gt;&lt;em&gt;\$1, \$2&lt;/em&gt;&lt;/strong&gt;. Here&amp;rsquo;s the screen shot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://s3.amazonaws.com/www.adampresley.com/posts/regex-sql-column-replace-1.jpg&#34; alt=&#34;SQL Column Formatting using RegexBuddy&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions - Commas at the Beginning of Column Names</title>
      <link>http://adampresley.com/post/regular-expressions-commas-at-the-beginning-of-column-names/</link>
      <pubDate>Mon, 06 Apr 2009 08:47:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/regular-expressions-commas-at-the-beginning-of-column-names/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve worked with a lot of inline SQL like I have over the years
you&amp;rsquo;ve probably discovered quickly that as you have to add more columns
to your query, &lt;strong&gt;especially&lt;/strong&gt; columns that are only added on a dynamic
condition, it can be easy to mangle up your commas. Here&amp;rsquo;s an example of
a common type of query I deal with at work on a regular basis.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;column1,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;column2,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;column3&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;table1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if I am asked to add a column based on some condition it could look
like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;SELECT
    column1,
    column2,
    column3
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;cfif&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;someCondition&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;EQ&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;, column4&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/cfif&amp;gt;&lt;/span&gt;
FROM table1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So over time I&amp;rsquo;ve come around to the SQL syntax where you put commas
&lt;strong&gt;before&lt;/strong&gt; your column name, making this kind of problem less of an
issue.&lt;/p&gt;

&lt;p&gt;So in working with old queries I&amp;rsquo;ve had to convert a few to this syntax
just for readability. Here is a little regular expression I cooked up
that can help this along. It&amp;rsquo;s not quite perfect, and doesn&amp;rsquo;t work in
Eclipse (lack of lookahead support perhaps?), but will work in more
powerful regex editors (Boxer, for example). It doesn&amp;rsquo;t catch the last
column, and will double up on commas that already at the beginning of
the column. Like I said, not perfect, but helpful nonetheless.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(\s*)([a-z0-9\._\(\)\s&amp;#39;,]+)(?=,),
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Use this regex as your search condition, and the replace text is &amp;ldquo;&lt;strong&gt;\$1,
\$2&lt;/strong&gt;&amp;rdquo;, without quotes.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>