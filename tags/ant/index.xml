<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ant on Adam.Blog()</title>
    <link>http://adampresley.com/tags/ant/</link>
    <description>Recent content in Ant on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Nov 2010 23:54:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/ant/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My First Real ANT Task</title>
      <link>http://adampresley.com/post/my-first-real-ant-task/</link>
      <pubDate>Tue, 16 Nov 2010 23:54:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/my-first-real-ant-task/</guid>
      <description>&lt;p&gt;&lt;em&gt;Notice: The opinions expressed on this blog entry are mine alone and
do not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that the employer notice is out of the way I can actually start
talking about what I wish to talk about. At work we have a big
initiative to put CFQUERYPARAM into our SQL statements that do not have
it. Since this code is quite old a large majority of it does not make
use of this handy tag, so as you might imagine it is a pretty big task
to go over 3,000 files and validate that CFQUERYPARAM was put everywhere
it needs to be.&lt;/p&gt;

&lt;p&gt;After the initial effort a coworker of mine created a series of regular
expressions to help validate the effort and point out any areas where we
may have done the work incorrectly. And lets be honest, staring at a
screen for 8 hours and looking for CFQUERY and variables in pound signs
can start to blur pretty quickly. Given these useful regexs I though it
would be neat to have a simple ANT script that would prompt for a
directory or file name resource and run these regexs against that
resource and create a report of any potential problem areas in an Excel
spreadsheet.&lt;/p&gt;

&lt;p&gt;To demonstrate lets take a look at what the ANT script itself looks
like.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--?xml version=&amp;quot;1.0&amp;quot;?--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;CFQUERYPARAM Tester&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;taskdef&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;queryParamChecker&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;classname=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.apihealthcare.opt.QueryParamChecker&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;

   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Please provide a directory path or file path to scan:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addproperty=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;defaultvalue=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${basedir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;

      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;queryparamchecker&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;path=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${path}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;outputfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\\anttasktestresults.xlsx&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/queryparamchecker&amp;gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/taskdef&amp;gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first thing to do is &amp;ldquo;import&amp;rdquo; a custom task called
&lt;strong&gt;queryParamChecker&lt;/strong&gt;. This is a custom ANT task that I have written
that scans a resource for potential problems based on a set of regular
expressions. We then make use of the &lt;strong&gt;input&lt;/strong&gt; task to prompt the user
for the resource name, a directory or file path, and then pass that to
the query param checker task.&lt;/p&gt;

&lt;p&gt;So how does one write a custom ANT task? For this I used Groovy, so I
started with a new Groovy project in Eclipse. I then added the following
JAR files to my classpath:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ant.jar&lt;/li&gt;
&lt;li&gt;commons-logging-1.1.jar&lt;/li&gt;
&lt;li&gt;dom4j-1.6.1.jar&lt;/li&gt;
&lt;li&gt;poi-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;poi-ooxml-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;poi-ooxml-schemas-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;xmlbeans-2.3.0.jar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These JAR files give us the Apache POI project for creating Excel
documents, as well as the necessary ANT classes for building a custom
ANT task. I then created a new package in my freshly created project and
called it &lt;strong&gt;com.apihealthcare.opt&lt;/strong&gt;. In this package I created a new
Groovy class named &lt;strong&gt;QueryParamChecker&lt;/strong&gt;. The first thing necessary to
creating a custom ANT task is to import the Apache ANT classes, then
extend the Task class. Your new class must override the &lt;strong&gt;execute()&lt;/strong&gt;
method, and provide &lt;strong&gt;setters&lt;/strong&gt; for each property your new task will
support.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;apihealthcare&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;opt&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.tools.ant.*&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;QueryParamChecker&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;

   &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BuildException&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setPath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setOutputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;outputFile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the skeleton for a custom ANT task. But I clearly wanted more
than a skeleton. I need it to check resources for errors in
CFQUERYPARAM. There are three pieces of information I used to do this.
The first is an array of regular expression object that are the meat and
potatoes of what we are trying to do here. The next is an array of file
extensions that are valid for us to check, so it contains &amp;ldquo;.cfm&amp;rdquo; and
&amp;ldquo;.cfc&amp;rdquo;. And finally I have an array of regular expressions that are used
to filter out any undesirable files or folders, as this application has
a number of old files that are no longer used. Here are those arrays.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * An array of regular expressions to check files against.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Modify this list to change the rules yo.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!list).)*&amp;gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;//~/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!cfsqltype).)*&amp;gt;/,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)(#\s*cfsqltype=|#\s*maxlength=|#\s*list=|#\s*value=)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)\sin(\s|\()[^&amp;gt;]*(value=&amp;quot;#listqualify|value=&amp;quot;#replace|value=&amp;quot;#preservesinglequotes)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)[^&amp;lt;]cfqueryparam/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)&amp;lt;cfqueryparam[^&amp;lt;&amp;gt;]*&amp;quot;\s*\/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[^&amp;gt;]&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#dateadd/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)&amp;lt;cfqueryparams/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)cfsqltype=&amp;quot;&amp;quot;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)(#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value|#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfsqltype&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;maxlength)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)order\s*by\s*&amp;lt;cfqueryparam/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)(cfqueryparamvalue|cfqueryparamcfsqltype|cfqueryparammaxlength|cfqueryparamlist)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)&amp;lt;cfqueryparam[^&amp;gt;]*(?=\/\s*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;charindex&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([^&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)]*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)[^&amp;lt;!-|&amp;lt;!]--[^&amp;gt;|-].*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.(?!(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hasPermission&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;usersession&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;An&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;extensions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ignore&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;private def validExtensions = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   &amp;quot;.cfm&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   &amp;quot;.cfc&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patterns&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ignore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;private def ignores = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;unused_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(.*)/&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;From here I created two functions. The first will check a single file
for errors against the regexs, and the second will recurse a directory
structure. They are both very similar, and likely could have been
written more reusable, but for now they do the trick. Essentially these
functions will read the text from the file and compare it against each
regular expression in the &lt;strong&gt;checks&lt;/strong&gt; array. If there are matches
they are stored in a structure and put into the &lt;strong&gt;badCodeResults&lt;/strong&gt;
array.&lt;/p&gt;

&lt;p&gt;After these are done the &lt;strong&gt;_writeOutputFile()&lt;/strong&gt; method is called to
take the items in &lt;strong&gt;badCodeResults&lt;/strong&gt; and place them into an Excel
spreadsheet. To do this you first create an &lt;strong&gt;XSSFWorkbook&lt;/strong&gt;, an
&lt;strong&gt;XSSFCreationHelper&lt;/strong&gt;, and an &lt;strong&gt;XSSFSheet&lt;/strong&gt; object. The sheet
is created off the workbook; essentially it creates a new worksheet in
the workbook in Excel. The I loop over the &lt;strong&gt;badCodeResults&lt;/strong&gt; and
create cells for the file path, the offending text, and the start and
end locations of the offending text location. To top it off I then write
the file to disk.&lt;/p&gt;

&lt;p&gt;Below is the task in its entirety. You can also &lt;a href=&#34;http://dl.dropbox.com/u/5726689/blog-downloads/ApiAntTasks.zip&#34;&gt;download the soure code here&lt;/a&gt;. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;apihealthcare&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;opt&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.tools.ant.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groovy.io.FileType&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.poifs.filesystem.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.xssf.extractor.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.xssf.usermodel.*&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;QueryParamChecker&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;

   &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * An array of regular expressions to check files against.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * Modify this list to change the rules yo.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    */&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!list).)*&amp;gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;//~/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!cfsqltype).)*&amp;gt;/,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)(#\s*cfsqltype=|#\s*maxlength=|#\s*list=|#\s*value=)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)\sin(\s|\()[^&amp;gt;]*(value=&amp;quot;#listqualify|value=&amp;quot;#replace|value=&amp;quot;#preservesinglequotes)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)[^&amp;lt;]cfqueryparam/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)&amp;lt;cfqueryparam[^&amp;lt;&amp;gt;]*&amp;quot;\s*\/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[^&amp;gt;]&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#dateadd/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)&amp;lt;cfqueryparams/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)cfsqltype=&amp;quot;&amp;quot;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)(#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value|#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfsqltype&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;maxlength)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)order\s*by\s*&amp;lt;cfqueryparam/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)(cfqueryparamvalue|cfqueryparamcfsqltype|cfqueryparammaxlength|cfqueryparamlist)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)&amp;lt;cfqueryparam[^&amp;gt;]*(?=\/\s*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;charindex&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([^&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)]*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)[^&amp;lt;!-|&amp;lt;!]--[^&amp;gt;|-].*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.(?!(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hasPermission&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;usersession&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;An&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;extensions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ignore&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   private def validExtensions = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      &amp;quot;.cfm&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      &amp;quot;.cfc&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patterns&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ignore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   private def ignores = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;unused_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(.*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   @Override&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   public void execute() throws BuildException {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def fileCheck = new File(this.path)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def result = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      if (fileCheck.isFile()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         result = _doFile()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      else if (fileCheck.isDirectory()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         result = _doDirectory()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      else&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         throw new Exception(&amp;quot;The path passed in doesn&amp;#39;t seem to be a file or a directory!&amp;quot;)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      _writeOutputFile(result)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   public void setPath(String path) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      this.path = path&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   public void setOutputFile(String outputFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      this.outputFile = outputFile&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _doFile() {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badCodeResults = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;searching&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def f = new File(this.path)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      assert f.isFile()&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def filesProcessed = 0&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badFiles = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def printed = false&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;particular&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;If&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;validFile&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      validExtensions.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (f.name.endsWith(it)) validFile = true&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      ignores.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         def ignoreMe = f.name ==~ it&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (validFile != false &amp;amp;&amp;amp; ignoreMe) validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Enter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      if (validFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         filesProcessed++&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;looping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;wish&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;against&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         checks.each { regex -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def matcher = f.text =~ regex&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def index = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;            /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matches&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            while (matcher.find()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;have&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Put&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               if (matcher.group(0) != null &amp;amp;&amp;amp; matcher.group(0) != &amp;quot;&amp;quot;) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  if (!printed) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     println &amp;quot;File: ${f.name}...&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     badFiles++&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  printed = true&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;                  badCodeResults &amp;lt;&amp;lt; [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     filePath: f.getAbsolutePath(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     offendingText: matcher.group(0),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     start: matcher.start(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     end: matcher.end()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  ]&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;Processed ${filesProcessed} file(s)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;${badFiles} bad file(s) found&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _doDirectory() {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badCodeResults = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;searching&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def rootPath = this.path&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def codeBase = new File(rootPath)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      assert codeBase.isDirectory()&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def filesProcessed = 0&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badFiles = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Iterate&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      codeBase.eachFileRecurse FileType.FILES, { f -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def printed = false&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;particular&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;If&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;validFile&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      validExtensions.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (f.name.endsWith(it)) validFile = true&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      ignores.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         def ignoreMe = f.name ==~ it&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (validFile != false &amp;amp;&amp;amp; ignoreMe) validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Enter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      if (validFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         filesProcessed++&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;looping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;wish&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;against&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         checks.each { regex -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def matcher = f.text =~ regex&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def index = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;            /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matches&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            while (matcher.find()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;have&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Put&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               if (matcher.group(0) != null &amp;amp;&amp;amp; matcher.group(0) != &amp;quot;&amp;quot;) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  if (!printed) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     println &amp;quot;File: ${f.name}...&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     badFiles++&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  printed = true&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;                  badCodeResults &amp;lt;&amp;lt; [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     filePath: f.getAbsolutePath() - rootPath,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     offendingText: matcher.group(0),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     start: matcher.start(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     end: matcher.end()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  ]&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;Processed ${filesProcessed} file(s)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;${badFiles} bad file(s) found&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _writeOutputFile(badCodeResults) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;workbook&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFWorkbook wb = new XSSFWorkbook()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFCreationHelper helper = wb.getCreationHelper()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFSheet sheet = wb.createSheet(&amp;quot;Search Results&amp;quot;)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def rowIndex = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;write&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;them&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rows&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Excel&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sheet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         XSSFRow row = sheet.createRow(rowIndex++)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(0).setCellValue(helper.createRichTextString(it.filePath))&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(1).setCellValue(helper.createRichTextString(it.offendingText))&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(2).setCellValue(it.start)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(3).setCellValue(it.end)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Write&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Note&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*/&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;outputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;wb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Output results written to ${this.outputFile}&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Update: ANT to Automate Build Version Number&#39;</title>
      <link>http://adampresley.com/post/update-ant-to-automate-build-version-number/</link>
      <pubDate>Tue, 08 Jun 2010 14:45:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/update-ant-to-automate-build-version-number/</guid>
      <description>&lt;p&gt;In a previous post &lt;a href=&#34;#post/2009/01/using-ant-to-automate-a-build&#34;&gt;Using ANT to Automate a Build Version Number&lt;/a&gt;
I talk about incrementing build numbers using ANT. I found this
particularly useful when building Mura plugins. Thanks to &lt;a href=&#34;http://stevegood.org&#34;&gt;Steve Good&lt;/a&gt;
for pointing out a little issue where if you wish to use the build
number in naming your ZIP file, my example is incomplete. So to pull in
the build number as a property so that you can include it in the ZIP
file&amp;rsquo;s name, you would need to tell ANT to load the property file and
read in the properties like so.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build.properties&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;zip&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;destfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\HelloPlugin-${buildNumber}.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;${buildNumber}&lt;/strong&gt; portion gets the value from the build.properties
file and uses it as part of the filename. Good catch Steve!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using ANT to Automate a Build Version Number</title>
      <link>http://adampresley.com/post/using-ant-to-automate-a-build-version-number/</link>
      <pubDate>Thu, 20 May 2010 10:18:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/using-ant-to-automate-a-build-version-number/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been writing some &lt;a href=&#34;http://www.getmura.com/&#34;&gt;Mura&lt;/a&gt;
plugins. One of the basic pieces of the plugin is the the
&lt;strong&gt;config.xml&lt;/strong&gt; file which contains metadata about your plugin. One piece
of that metadata is the version number of the plugin. And every time I
made a change to the plugin, I would go and change the version number in
the &lt;strong&gt;config.xml&lt;/strong&gt; to reflect the newest build number. So if the major
version is &lt;em&gt;1&lt;/em&gt; and the minor version is &lt;em&gt;2&lt;/em&gt;, and I&amp;rsquo;ve packaged this
plugin &lt;em&gt;4&lt;/em&gt; times, the version number should be &lt;em&gt;1.2.04&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Changing the build number manually every time became a hassle so I&amp;rsquo;ve
cooked up a small ANT script to automate not only the task of build
numbers, but also zipping up the plugin for deployment.
My objective here is to first update the build number in the
&lt;strong&gt;config.xml&lt;/strong&gt; file then zip up all the files and directories minus the
Eclipse &lt;strong&gt;.project&lt;/strong&gt; file. The first thing we will need is a
&lt;em&gt;properties&lt;/em&gt; file. This will contain our build number.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;#Date last modified put here by ANT
buildNumber=04
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The intent here is that ANT will read this, automatically increment the
value, and put that value into our &lt;strong&gt;config.xml&lt;/strong&gt;. But how can ANT know
how to do this? Good question! This is done by replacement tokens. Let&amp;rsquo;s
see that shall we?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Hello World Plugin&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- the package value becomes a part of the directory name where the plugin is installed. --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;package&amp;gt;&lt;/span&gt;SayHelloPlugin&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/package&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.@buildNumber@&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;provider&amp;gt;&lt;/span&gt;AdamPresley.com&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;providerurl&amp;gt;&lt;/span&gt;http://www.adampresley.com&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/providerURL&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;Application&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;settings&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;eventhandlers&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- For display objects the the location attribute determines whether display objects for&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		  the plugin will execute locally of globallyLocally means&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		  /[siteid]/includes/plugins/[package]_[pluginID]/Globally means /plugins/[package]_[pluginID]/&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;	--&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;displayobjects&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;global&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;displayobject&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Say Hello&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;displayobjectfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;displayObjects/sayHello.cfm&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/displayobjects&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the &lt;em&gt;&lt;version&gt;&lt;/em&gt; node? We have replacement token in there named
&lt;strong&gt;buildNumber&lt;/strong&gt;. This is denoted by the @ symbol on either side of the
token. ANT has a command to find and replace that token with whatever
you wish. How? First we need to load our properties file and increment
the build number. Then we need to do the replacement. Here&amp;rsquo;s how that
works.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;propertyfile&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build.properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;key=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildNumber&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;operation=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pattern=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/propertyfile&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Updating build number in /plugin/config.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;replace&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\plugin\config.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;propertyFile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build.properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;replacefilter&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;token=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;@buildNumber@&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildNumber&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/replace&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The first task, &lt;em&gt;&lt;propertyfile&gt;&lt;/em&gt; reads the &lt;strong&gt;build.properties&lt;/strong&gt;
file and increments the &lt;strong&gt;buildNumber&lt;/strong&gt; variable by using the
&lt;em&gt;&lt;entry&gt;&lt;/em&gt; task. We then use the &lt;em&gt;&lt;replace&gt;&lt;/em&gt; task to replace that
&lt;strong&gt;@buildNumber@&lt;/strong&gt; token we placed in the &lt;strong&gt;config.xml&lt;/strong&gt; file. The
&lt;em&gt;&lt;replacefilter&gt;&lt;/em&gt; task tells ANT what token to replace, and what
variable from the properties file to replace it with. Cool huh?!?&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like some more info on the basics of ANT you can check out my
other posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#post/2009/01/using-ant-to-automate-a-build&#34;&gt;Using ANT To Automate a Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post/2009/12/automate-compressing-js-and-css-with-ant&#34;&gt;Automate Compressing JS and CSS with ANT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a full example. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.properties&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;#Date last modified put here by ANT
buildNumber=04
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.xml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello World Plugin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
			ANT build script to build the Hello World Plugin for Mura
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;propertyfile&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build.properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;key=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildNumber&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;operation=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pattern=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/propertyfile&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\code\HelloPlugin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Build ${buildNumber}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Copying files to build folder...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;mkdir&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;todir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
					&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;**/displayObjects/*&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
					&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;**/plugin/*&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
					&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;index.cfm&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/copy&amp;gt;&lt;/span&gt;

			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Updating build number in /plugin/config.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;replace&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\plugin\config.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;propertyFile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build.properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;replacefilter&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;token=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;@buildNumber@&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildNumber&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/replace&amp;gt;&lt;/span&gt;

			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Zipping contents...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;zip&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;destfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\HelloPlugin.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cleaning up...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;includeEmptyDirs=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;includes=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;**&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/delete&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automate Compressing JS and CSS with ANT</title>
      <link>http://adampresley.com/post/automate-compressing-js-and-css-with-ant/</link>
      <pubDate>Thu, 31 Dec 2009 08:01:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/automate-compressing-js-and-css-with-ant/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m still a bit of a n00b with ANT still, but I took the time today to
improve my skills with it a tad to help automate a task which has become
quite repetitive. Once we are ready to roll changes to our application
we first have to minify our JavaScript and CSS files. We use the &lt;a href=&#34;http://refresh-sf.com/yui/&#34;&gt;YUI
Compressor&lt;/a&gt; which is a very nice compression
engine for both JS and CSS. It also just so happens that they have a
Java executable JAR to run compression against your files with.&lt;/p&gt;

&lt;p&gt;As such I set out to make an ANT script. For an entry talking about the
basics of building ANT scripts see my blog entry on &lt;a href=&#34;http://blog.adampresley.com/2009/using-ant-to-automate-a-build/&#34;&gt;Using ANT to
Automate a Build&lt;/a&gt;.
In this post I&amp;rsquo;m simply going to cover how to call the JAR file to
perform minification.&lt;/p&gt;

&lt;p&gt;First and foremost download the &lt;a href=&#34;http://yuilibrary.com/downloads/&#34;&gt;YUI Compressor Java tool&lt;/a&gt;,
and extract it to some accessible location. This is the application that
does all the magic.&lt;/p&gt;

&lt;p&gt;To make life easier I started with a few properties to make this a tad
more configurable. Below I setup properties for the client&amp;rsquo;s application
directory, the path to the compressor JAR, as well as the JavaScript and
CSS directories.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;app-folder&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;compressorJar&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\yui-compressor\build\yuicompressor-2.4.2.jar&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;jsSourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\${app}\js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cssSourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\${app}\css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this we create a target&amp;hellip; we&amp;rsquo;ll call it &lt;strong&gt;minify&lt;/strong&gt; ( that&amp;rsquo;s
original&amp;hellip; :/ ). In this method we want to do two things: minify our
JavaScript file, and minify our CSS file. Clearly in my case we have
only two files to minify, and your mileage may vary. Let&amp;rsquo;s take a look
at that.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;java&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;jar=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${compressorJar}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fork=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;failonerror=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--line-break&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4000&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--preserve-semi&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${jsSourceDir}\library.min.js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${jsSourceDir}\library.js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/java&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The task &lt;strong&gt;java&lt;/strong&gt; executes the Java command line for the default
installed JVM. Notice the attributes used here. The first is &lt;em&gt;jar&lt;/em&gt;. This
attribute specifies the name of the JAR file to use. We&amp;rsquo;ve passed the
property &lt;em&gt;compressorJar&lt;/em&gt;, which as we saw above contains the full path
to our YUI compressor JAR. Also notice that to run a JAR file we need to
tell ANT to &amp;ldquo;fork&amp;rdquo; a new process. This is done by providing the &lt;em&gt;fork&lt;/em&gt;
attribute and set it to true. I am also setting the &lt;em&gt;failonerror&lt;/em&gt;
attribute to true so that if the JAR file returns a non-zero value the
ANT script will halt with an error.&lt;/p&gt;

&lt;p&gt;From here the YUI Compressor has a good number of arguments it can take
to customize the minifcation experience. What I&amp;rsquo;ve done here is tell it
to add line breaks at 4000 characters (&amp;ndash;line-break 4000), the type of
file is a JavaScript file (&amp;ndash;type js), to preserve excess semicolons
(&amp;ndash;preserve-semi), and that we have an output file specified. The final
argument is the input file.&lt;/p&gt;

&lt;p&gt;After this we do the same to the CSS. Notice the lack of the
&amp;ndash;preserve-semi argument. That argument does not apply to CSS
minification.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;java&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;jar=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${compressorJar}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fork=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;failonerror=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--line-break&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4000&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${cssSourceDir}\style.min.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${cssSourceDir}\style.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/java&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Below is the script in its full glory. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Minify JS and CSS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;minify&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
		ANT build script to automate minification of library.js
		and style.css.
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;app-folder&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;compressorJar&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\yui-compressor\build\yuicompressor-2.4.2.jar&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;jsSourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\${app}\js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cssSourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\devpath\${app}\css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;minify&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Starting minification process.&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Minifying JS...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;java&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;jar=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${compressorJar}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fork=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;failonerror=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--line-break&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4000&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--preserve-semi&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${jsSourceDir}\library.min.js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${jsSourceDir}\library.js&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/java&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Minifying CSS...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;java&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;jar=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${compressorJar}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fork=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;failonerror=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--line-break&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4000&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${cssSourceDir}\style.min.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${cssSourceDir}\style.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/java&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using ANT to Automate A Build</title>
      <link>http://adampresley.com/post/using-ant-to-automate-a-build/</link>
      <pubDate>Wed, 14 Jan 2009 06:24:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/using-ant-to-automate-a-build/</guid>
      <description>&lt;p&gt;Last night I attended the Dallas/Fort Worth ColdFusion User Group
meeting held at the &lt;a href=&#34;http://www.paladin-inc.com/&#34;&gt;Paladin Consulting&lt;/a&gt;
offices, lead here locally by Dave Shuck. There were three presentations
scheduled, though one was cancelled last minute, so we only got two.
Although both presentations were good the one I got the most use of our was Dave Shuck&amp;rsquo;s
introduction to ANT scripts.&lt;/p&gt;

&lt;p&gt;I had heard of &lt;a href=&#34;http://ant.apache.org/&#34;&gt;ANT&lt;/a&gt;, and had already been curious about getting my
hand dirty in it to see what it could do, but have never found the time
to do it. After his presentation, however, I went home and decided it
was time to at least play with it. I did have a real-world test to try
it on. A little contract project I just worked needed a small
modification on two of the PHP files, and then I needed to redistribute
it to the client. What this involved, however, was more than just
zipping it up.&lt;/p&gt;

&lt;p&gt;First I had to make the modifications to the code and test it. Simple
enough. Then I needed to copy only the PHP and CSS files I needed to a
temporary directory, clean out my password information from the XML
configuration files and copy THOSE over. THEN I had to regenerate my
HTML documentation using the always wonderful &lt;a href=&#34;http://www.doxygen.org&#34;&gt;Doxygen&lt;/a&gt;,
copy all THOSE files to the temporary directory, ZIP it all up, and THEN send it
to the client. ANT to the rescue!&lt;/p&gt;

&lt;p&gt;First things first, create an XML file. Let&amp;rsquo;s call it
&lt;strong&gt;example-build.xml&lt;/strong&gt;. This is the actual script file. The very first
things to put in there are the XML header, a project element, and a
description. That will look like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Example Application&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
		ANT build script for the example application.
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now what we want to do is consider what locations we need to work with.
Firstly we need to know where our source files are coming from, and also
where they are going to. For my needs I opted to have the end result go
into a sub-folder named &lt;strong&gt;build&lt;/strong&gt;. Also consider I&amp;rsquo;m building
documentation HTML files using Doxygen, so I&amp;rsquo;ll need to know where the
Doxygen executable is at, as well as the source and target locations for
those documents reside. We want a few *properties*then. Note that your
paths will obviously vary, and will need to be changed. That will look
like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Global properties --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\code\example-application&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sourceDocDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\documentation\html&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;targetDocDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\documentation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;doxygen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\doxygen\doxygen-1.5.3.exe&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In ANT doing some SET of tasks is known as a &lt;strong&gt;target&lt;/strong&gt;. Programmers,
think of it as a function, or method. At the simplest level a target has
a name, and a series of tasks to execute. Let&amp;rsquo;s start by defining the
target and telling ANT to get a current date and time stamp.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Get a current date/time stamp --&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;tstamp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we would like to copy our code and supporting files to the build
directory. In my case I wanted all the PHP files EXCEPT for one, all the
CSS files, and a clean version of the XML configuration file for our
application. The &lt;em&gt;copy&lt;/em&gt; task tells ANT to copy files and/or directories.
Being versatile you can specify very exacting criteria, and in this
example we will have three include patterns, and one exclude. Let&amp;rsquo;s look
at that.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Copy our files to the build folder. --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Copying files to build folder...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;todir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.php&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;baseSettings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;exclude&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;dBug.php&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/copy&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note, however, that our application doesn&amp;rsquo;t read &amp;ldquo;baseSettings.xml&amp;rdquo;
which was clearly copied to the build directory. It expects
&amp;ldquo;settings.xml&amp;rdquo;. &amp;ldquo;baseSettings.xml&amp;rdquo; is the clean version. What we want to
do now is rename the file to &amp;ldquo;settings.xml&amp;rdquo; in the build directory.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		Get clean copies of our application configuration files. Basically&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		we have &amp;quot;base&amp;quot; versions, which are clean configuration files without&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		anything but base data in it. We want to copy those to the build&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		directory and then rename them to what they SHOULD be.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;	--&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Building XML configuration files...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;move&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\baseSettings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tofile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\settings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, now it&amp;rsquo;s time to build the documentation. In my source directory I
have a &lt;em&gt;doxyfile&lt;/em&gt; that tells Doxygen how to build the documentation.
Here what we want to do is remove the existing documentation files (if
any), make a &lt;em&gt;documentation&lt;/em&gt; directory in the build location and have
Doxygen build the docs in the source documentation folder. After that is
done it needs to copy those files to the target documentation folder.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		Build the application documentation. My PHP apps use the JavaDoc&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		syntax, and a wonderful tool called Dogygen for document generation.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		Once it is built copy the generated HTML files to the target&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		documentation directory.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;	--&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Building documentation...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;mkdir&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;exec&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;executable=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${doxygen}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\example-application.doxyfile&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/exec&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;todir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/copy&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now that we have all the code and documentation files necessary to give
to the client I&amp;rsquo;d like to ZIP all that up into a nice, neat, date and
time stamped file.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Zip up the contents. Date and timestamp the filename. --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Zipping contents...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;zip&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;destfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\example-application-${DSTAMP}-${TSTAMP}.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Cool, so we have a ZIP file. Let&amp;rsquo;s clean up the mess. This involves
deleting all the files in the build directory EXCEPT for the ZIP file,
and deleting the target documentation directory. We&amp;rsquo;ll also close off
our target and project.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Clean up our mess. --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cleaning up...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;excludes=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/delete&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s the basics of using ANT to automate build and deployment!
Following is the script in its entirity.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Example Application&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
		ANT build script for the example application.
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Global properties --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sourceDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\code\example-application&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buildDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\build&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sourceDocDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\documentation\html&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;targetDocDir&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\documentation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;doxygen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;location=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\doxygen\doxygen-1.5.3.exe&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Get a current date/time stamp --&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;tstamp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Copy our files to the build folder. --&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Copying files to build folder...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;todir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.php&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;include&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;baseSettings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;exclude&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;dBug.php&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/copy&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			Get clean copies of our application configuration files. Basically&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			we have &amp;quot;base&amp;quot; versions, which are clean configuration files without&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			anything but base data in it. We want to copy those to the build&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			directory and then rename them to what they SHOULD be.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		--&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Building XML configuration files...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;move&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\baseSettings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tofile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\settings.xml&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			Build the application documentation. My PHP apps use the JavaDoc&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			syntax, and a wonderful tool called Dogygen for document generation.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			Once it is built copy the generated HTML files to the target&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;			documentation directory.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;		--&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Building documentation...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;mkdir&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;exec&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;executable=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${doxygen}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;arg&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDir}\example-application.doxyfile&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/exec&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;todir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${sourceDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/copy&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Zip up the contents. Date and timestamp the filename. --&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Zipping contents...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;zip&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;destfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}\example-application-${DSTAMP}-${TSTAMP}.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- Clean up our mess. --&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cleaning up...&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${buildDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;excludes=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.zip&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/delete&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${targetDocDir}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>