<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Groovy on Adam.Blog()</title>
    <link>http://adampresley.com/tags/groovy/</link>
    <description>Recent content in Groovy on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Aug 2012 19:50:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/groovy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grails - Problem Transforming Call Sites</title>
      <link>http://adampresley.com/post/grails-problem-transforming-call-sites/</link>
      <pubDate>Wed, 29 Aug 2012 19:50:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/grails-problem-transforming-call-sites/</guid>
      <description>&lt;p&gt;While working on a project in Grails 2.1.0 (on Windows 7 64-bit) I ran
into an interesting error.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Aug 29, 2012 7:17:21 PM com.springsource.loaded.agent.SpringLoadedPreProcessor preProcess
SEVERE: Unexpected problem transforming call sites
java.lang.IllegalStateException: Unexpected problem processing bytes for class
        at com.springsource.loaded.ConstantPoolChecker2.readConstantPool(ConstantPoolChecker2.java:182)
        at com.springsource.loaded.ConstantPoolChecker2.(ConstantPoolChecker2.java:114)
        at com.springsource.loaded.ConstantPoolChecker2.getReferences(ConstantPoolChecker2.java:88)
        at com.springsource.loaded.MethodInvokerRewriter.rewrite(MethodInvokerRewriter.java:248)
        at com.springsource.loaded.MethodInvokerRewriter.rewriteUsingCache(MethodInvokerRewriter.java:141)
        at com.springsource.loaded.TypeRegistry.methodCallRewriteUseCacheIfAvailable(TypeRegistry.java:775)
        at com.springsource.loaded.agent.SpringLoadedPreProcessor.preProcess(SpringLoadedPreProcessor.java:251)
        at com.springsource.loaded.agent.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:89)
        at sun.instrument.TransformerManager.transform(TransformerManager.java:188)
        at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:424)
        at java.lang.ClassLoader.defineClass1(Native Method)...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had done some searching and apparently a &lt;em&gt;similar&lt;/em&gt; error had been
addressed previously. The part about &lt;strong&gt;Unexpected problem transforming
call sites&lt;/strong&gt; was the same, but the actual exception,
&lt;strong&gt;java.lang.IllegalStateException&lt;/strong&gt; differed. I&amp;rsquo;m not sure what the
&lt;em&gt;actual&lt;/em&gt; fix is, but I went to &lt;em&gt;{home folder}/AppData&lt;/em&gt; and deleted the
&lt;strong&gt;.grails&lt;/strong&gt; folder. This seemed to address the problem. Hope this helps
anybody who might run into the same problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy 1.8 Released</title>
      <link>http://adampresley.com/post/groovy-18-released/</link>
      <pubDate>Wed, 27 Apr 2011 10:29:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/groovy-18-released/</guid>
      <description>&lt;p&gt;Groovy 1.8 has finally been released, and let me comment on that with
&lt;strong&gt;YAY!&lt;/strong&gt; There are some really great enhancements to an already great
language. I&amp;rsquo;m only going to point out a few of the areas that I am
particularly interested in, but you can see the release notes &lt;a href=&#34;http://docs.codehaus.org/display/GROOVY/Groovy+1.8+release+notes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of particular interest to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Command chains for nicer Domain-Specific Languages

&lt;ul&gt;
&lt;li&gt;This one is cool because it takes the already powerful DSL abilities of Groovy and allows an even more natural language syntax. For example: &lt;em&gt;paint wall with red, green and yellow&lt;/em&gt;, or &lt;em&gt;convert result to xml&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GPars bundled within the Groovy distribution

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m already working in a project that uses the excellent GPars library, and having it bundled is simply a nice to have.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Native JSON support

&lt;ul&gt;
&lt;li&gt;This is great, as I find myself using JSON more frequently than XML these days. Now I don&amp;rsquo;t have to add additional 3rd party libraries.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New AST Transformations

&lt;ul&gt;
&lt;li&gt;@Log annotation - YES! Now with just a simple annotation I can have my log4j logger ready and available. Sweet.&lt;/li&gt;
&lt;li&gt;@ThreadInterrupt - This is particularly handy. Now instead of having to put the logic checks in thread methods and loops for an interruption, this will do it for you!&lt;/li&gt;
&lt;li&gt;@ConditionalInterrupt - Similar to above, except this will actually interrupt the thread for you when a specified condition is met. This has some possiblity.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall those are the items I&amp;rsquo;m most excited about. If you haven&amp;rsquo;t had a
chance to try Groovy, do it &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;now!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to DSLs in Groovy, Part 3</title>
      <link>http://adampresley.com/post/intro-to-dsls-in-groovy-part-3/</link>
      <pubDate>Sun, 27 Mar 2011 11:45:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/intro-to-dsls-in-groovy-part-3/</guid>
      <description>

&lt;p&gt;Today let&amp;rsquo;s continue our series of getting started with simple DSL
creation in Groovy. In &lt;a href=&#34;|filename|/intro-to-dsls-in-groovy-part-1.md&#34;&gt;part 1&lt;/a&gt; we talked about the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt;
of Domain Specific Langages, and what our sample DSL would look like.
Then in &lt;a href=&#34;|filename|/intro-to-dsls-in-groovy-part-2.md&#34;&gt;part 2&lt;/a&gt; we actually started building the code in Groovy
creating the class necessary to make the DSL code start to work. In part
3 we will enhance our code to allow us to add ingredients with
measurements. Adding this will make the DSL more fluent and readable,
which is one of the main reasons you would bother to craft a DSL to
begin with!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve read my blog before you will have seen me talk about and
demonstrate how one can expand the capabilities of the existing Groovy
language though metaClass enhancements. I hope you were paying attention
because we are going to use them again. For our purposes we want to
enhance all number classes to be able to specify a unit of measurement
against it, which we will use later when displaying our recipe in
various output formats. So, as an example if our recipe called for 1 and
half cups of cheese, it could be written like &lt;strong&gt;1.5.cups&lt;/strong&gt;. We also wish
to ensure that all number classes get this, so our metaClass enhancement
needs to apply down the hierarchy. When a unit of measurement is applied
to a number, instead of returning an actual number class, we will
instead create a new Measurement class that will be returned in its
place.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Ensure that changes to base classes through metaClass&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * expand downwards.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ExpandoMetaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;enableGlobally&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Defines a unit and amount of measurement. Used for ingredients&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Measure&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;amount&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;unit&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${amount} ${unit}&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Allow all number classes to be expressed as #.measurement&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Number&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getProperty&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Measure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;amount:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;unit:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now with the measurement enhancement in place our DSL can now be written
like this.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pound&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now, finally, let&amp;rsquo;s create a couple of methods in our &lt;strong&gt;Recipe&lt;/strong&gt; class
from part 2 that will display our culinary creations in a couple of
different ways. We will make code to show the recipe in a standard &amp;ldquo;1,
2, 3&amp;rdquo; step format, and also in XML. To make the DSL syntax a little more
fluent we will also create some enums that we will statically import to
be used as &amp;ldquo;constants&amp;rdquo; to describe how to display our recipe.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groovy.xml.MarkupBuilder&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * These are the various actions that the &amp;quot;show&amp;quot; command can perform.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeCard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeXml&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Recipe&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;resolveStrategy&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DELEGATE_ONLY&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;// Resolve calls in this closure internally only&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addIngredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measure:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;INGREDIENTS:&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachWithIndex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${index + 1}. ${item.measure} of  ${item.ingredient}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;DIRECTIONS:&amp;quot;&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachWithIndex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${index + 1}. ${item}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RecipeCard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RecipeXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringWriter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xml&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MarkupBuilder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;xml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mkp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;yieldUnescaped&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;![CDATA[${ing.measure} of ${ing.ingredient}]]&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ins&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mkp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;yieldUnescaped&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;![CDATA[${ins }]]&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The code above is the &lt;strong&gt;Recipe&lt;/strong&gt; class with two new methods: &lt;strong&gt;show()&lt;/strong&gt;
and &lt;strong&gt;toXml()&lt;/strong&gt;. Here are a couple of sample uses with these new
methods.&lt;/p&gt;

&lt;h2 id=&#34;recipie-xml:c959beb457f298a00e5f0da4b57dffb2&#34;&gt;Recipie XML&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pound&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;show&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeXml&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;recipie-card:c959beb457f298a00e5f0da4b57dffb2&#34;&gt;Recipie Card&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pound&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;show&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeCard&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I hope this small introduction into DSL-world has been interesting. This
example barely scratches the surface of what can be done, and there is
certainly some pretty heavy reading out there on what can be done, and
how one can make DSLs. Here are some links to recommended reading.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.codehaus.org/display/GROOVY/Writing+Domain-Specific+Languages&#34;&gt;Writing Domain-Specific Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovy.dzone.com/news/groovy-dsl-scratch-2-hours&#34;&gt;A Groovy DSL from scratch in 2 hours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.citytechinc.com/sanderson/?p=92&#34;&gt;A Text Adventure DSL in Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anything Martin Fowler!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code in full:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groovy.xml.MarkupBuilder&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * These are the various actions that the &amp;quot;show&amp;quot; command can perform.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeCard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeXml&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Ensure that changes to base classes through metaClass&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * expand downwards.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ExpandoMetaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;enableGlobally&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Defines a unit and amount of measurement. Used for ingredients&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Measure&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;amount&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;unit&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${amount} ${unit}&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Defines the recipe &amp;quot;language&amp;quot;, it&amp;#39;s data, and transformations.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Recipe&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;resolveStrategy&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;DELEGATE_ONLY&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;// Resolve calls in this closure internally only&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addIngredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measure:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;INGREDIENTS:&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachWithIndex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${index + 1}. ${item.measure} of  ${item.ingredient}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;DIRECTIONS:&amp;quot;&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachWithIndex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${index + 1}. ${item}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RecipeCard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printIngredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;printInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

         &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ShowActions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RecipeXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toXml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringWriter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xml&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MarkupBuilder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;xml&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mkp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;yieldUnescaped&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;![CDATA[${ing.measure} of ${ing.ingredient}]]&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ins&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mkp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;yieldUnescaped&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;![CDATA[${ins }]]&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Allow all number classes to be expressed as #.measurement&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Number&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getProperty&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Measure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;amount:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;unit:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Actually try USING our little DSL.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pound&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;show&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeXml&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to DSLs in Groovy, Part 2</title>
      <link>http://adampresley.com/post/intro-to-dsls-in-groovy-part-2/</link>
      <pubDate>Thu, 24 Mar 2011 09:09:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/intro-to-dsls-in-groovy-part-2/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;|filename|/intro-to-dsls-in-groovy-part-1.md&#34;&gt;previous post&lt;/a&gt; I introduced a simple recipe DSL which provided
a really easy way to describe a recipe, its ingredients and
instructions. In part two I will start the process of how we can make
this tiny &amp;ldquo;language&amp;rdquo; of ours execute using Groovy&amp;rsquo;s excellent ability to
throw out the syntax noise to make our &amp;ldquo;language&amp;rdquo; seem more natural.&lt;/p&gt;

&lt;p&gt;To get started we&amp;rsquo;ll need to define the foundation for our DSL. If you
recall the first line of the DSL code it looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To accomplish this we are going to create a class, as well as a few
variables to hold the information about our recipe. The first method
called is &lt;strong&gt;create&lt;/strong&gt;, which will be a static method that uses a little
closure magic to execute the DSL code after the first curly brace. This
static method &lt;strong&gt;create&lt;/strong&gt; will create a copy of the passed in closure,
change the delegate to a new &lt;strong&gt;Recipe&lt;/strong&gt; object with the passed in name,
then execute. Changing the delegate tells the closure who it is
executing &lt;strong&gt;for&lt;/strong&gt;. Yes, it&amp;rsquo;s magic.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Recipe&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now our &lt;strong&gt;Recipe&lt;/strong&gt; class needs methods to add ingredients and
instructions. These methods are simple as they will just push what is
send to them to the two collections &lt;strong&gt;ingredients&lt;/strong&gt; and
&lt;strong&gt;instructions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addIngredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measure:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To add ingredients to the recipe we take two arguments: measurement, and
the ingredient. The &lt;strong&gt;Measurement&lt;/strong&gt; class is something we will get to
soon. This code is easy as it just adds the two items as a Map to the
&lt;strong&gt;ingredients&lt;/strong&gt; collection. The &lt;strong&gt;addInstructions&lt;/strong&gt; method is similar.
Notice the &amp;ldquo;&amp;hellip;&amp;rdquo; after the &lt;strong&gt;String&lt;/strong&gt; type. That indicates we will have
a list with an unknown number of elements being passed in. This allows a
list of instruction argument strings to be passed in, and it will get
treated as a collection. The whole listing looks like this so far.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Recipe&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Closure&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;clone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addIngredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredients&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measure:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;measurement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ingredient&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addInstructions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;instruction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;instructions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What we can do with what we have now is something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you compare that example to the one from the first post you will see
we are getting close. Up next we will talk about the &lt;strong&gt;Measurement&lt;/strong&gt;
class, and how to use Groovy&amp;rsquo;s metaclass enhancements to define custom
measurement types against numbers. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to DSLs in Groovy, Part 1</title>
      <link>http://adampresley.com/post/intro-to-dsls-in-groovy-part-1/</link>
      <pubDate>Tue, 22 Mar 2011 18:40:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/intro-to-dsls-in-groovy-part-1/</guid>
      <description>

&lt;p&gt;Here in a couple of weeks I will be presenting at the Dallas/Ft. Worth
Groovy User Group meeting on an introduction to DSLs, or &lt;em&gt;Domain
Specific Languages&lt;/em&gt;, in Groovy. What is particularly fun about this is
how wonderfully easy Groovy makes this task. In this post I am basically
giving a sneak peak into my presentation. Arent I nice? :)&lt;/p&gt;

&lt;p&gt;What is a DSL, and why do you care? The simple version is a DSL is a
small, focused language designed to make the description and execution
of some task in a specific domain easier. In fact we all use DSLs every
day and completely take for granted that we do. SQL, HTML, CSS, an Ant
XML file all DSLs. All designed to do something specific for the domain
they are related to.&lt;/p&gt;

&lt;p&gt;Here in Part 1 of this series I will show what our language will look
like. This little &amp;ldquo;language&amp;rdquo; will allow us to easily define a food
&lt;strong&gt;recipe&lt;/strong&gt;. Once defined we can easily tell this code to display the
recipe card, or even convert the recipe to XML. Here is what the
language will look like, as well as the rendered XML output.&lt;/p&gt;

&lt;h2 id=&#34;example:6a45c03d31e92ddf258f94396c2b55a5&#34;&gt;Example&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Recipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Creamy Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mac n&amp;#39; Cheese&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pound&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hamburger meat&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addIngredient&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;can&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cream of Mushroom&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;addInstructions&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brown hamburger meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Bring mac n&amp;#39; cheese to a boil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Drain water from noodles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir in cheese mixture&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Add cream of mushroom and meat&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Stir&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eat&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;show&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RecipeXml&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;xml-output:6a45c03d31e92ddf258f94396c2b55a5&#34;&gt;XML Output&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;recipe&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Creamy Mac n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;Cheese&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;ingredients&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;ingredient&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[1 box of Mac n&amp;#39; Cheese]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/ingredient&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;ingredient&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[1 pound of Hamburger meat]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/ingredient&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;ingredient&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[1 can of Cream of Mushroom]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/ingredient&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/ingredients&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instructions&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Brown hamburger meat]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Bring mac n&amp;#39; cheese to a boil]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Drain water from noodles]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Stir in cheese mixture]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Add cream of mushroom and meat]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Stir]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;instruction&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;![CDATA[Eat]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instruction&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/instructions&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/recipe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Upon first glance it should be pretty apparent what we are trying to do.
We first define a recipe with a name. Then we start adding ingredients,
each with a specific measurement. Notice each measurement is different,
and quite versatile. From here we add a list of instructions, and
finally display the results in XML.&lt;/p&gt;

&lt;p&gt;But how do we define such a language? Historically one might find
themselves investigating compiler compilers, writing nasty BNF language
descriptions, and maybe even writing parsers by hand. You might even
start Googling Recursive-Descent Parsers and RPN expression parsing
notation. Luckily, with the Groovy language, you dont have to worry
about that too much.&lt;/p&gt;

&lt;p&gt;Tune in next time for how we will get started defining this language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Regex Merging of Structures in Groovy: Revisited&#39;</title>
      <link>http://adampresley.com/post/regex-merging-of-structures-in-groovy-revisited/</link>
      <pubDate>Thu, 06 Jan 2011 21:03:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/regex-merging-of-structures-in-groovy-revisited/</guid>
      <description>&lt;p&gt;Some time ago I blogged about using CFGroovy to build a function to take
two structures and merge their keys together selectively based on a
regular expression. Today I revisit that to make a smarter function, and
way more trim. The enhancement here is to allow the user to pass in an
array of structures, allowing for merging of as many structures as the
user needs. We also cleaned up the code a bit to be more &lt;strong&gt;&lt;em&gt;Groovy&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reMerge&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;structArray&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[:]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;util&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;regex&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pattern&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/${regex}/&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;structArray&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;companyName:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;adampresley.com&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Presley&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reMerge&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i).*name/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take that sample snippet and drop it in GroovyConsole and run it. As you
can see it will give you a new structure with only the keys from the
three source structures that have the word &amp;ldquo;name&amp;rdquo; in it. You may also
notice the reMerge function can take the regular expression as a string
&lt;strong&gt;or&lt;/strong&gt; a Pattern object for convenience.&lt;/p&gt;

&lt;p&gt;Groovy is fun! Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing Groovy - SHA1 Hash Strings</title>
      <link>http://adampresley.com/post/enhancing-groovy-sha1-hash-strings/</link>
      <pubDate>Wed, 01 Dec 2010 21:06:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/enhancing-groovy-sha1-hash-strings/</guid>
      <description>&lt;p&gt;Continuing the series of enhancing Groovy&amp;rsquo;s core language classes, here
is a snippet that allows a &lt;strong&gt;String&lt;/strong&gt; to be hashed using the SHA1
algorithm. Let&amp;rsquo;s look at the code first.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.*&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello. This is my secret message. That should be hashed.&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toSHA1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;salt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messageDigest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MessageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHA1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

   &lt;span style=&#34;color: #f8f8f2&#34;&gt;messageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;salt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;messageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt;

   &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * Why pad up to 40 characters? Because SHA-1 has an output&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * size of 160 bits. Each hexadecimal character is 4-bits.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * 160 / 4 = 40&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    */&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BigInteger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;digest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;padLeft&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Source = ${source}&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHA1 = ${source.toSHA1(&amp;#39;salty&amp;#39;)}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script starts innocently enough with a source string that contains
a message to be hashed. We then extend the &lt;strong&gt;String&lt;/strong&gt; class with a new
function named &lt;strong&gt;toSHA1()&lt;/strong&gt;. This method uses the &lt;strong&gt;MessageDigest&lt;/strong&gt;
class from the &lt;strong&gt;java.security&lt;/strong&gt; package to run the source string
through the SHA1 hash routine. Also notice the optional &lt;strong&gt;salt&lt;/strong&gt;
argument. A salt is used to make the hash a little more secure and can
complicate various hack attacks
(&lt;a href=&#34;http://en.wikipedia.org/wiki/Salt_%28cryptography%29&#34;&gt;http://en.wikipedia.org/wiki/Salt_%28cryptography%29&lt;/a&gt;). We then pass
the byte array of the hashed string, as returned by
&lt;strong&gt;messageDigest.digest()&lt;/strong&gt;, into the constructor of a &lt;strong&gt;BigInteger&lt;/strong&gt;,
and in turn translate that into a string of Base 16 digits. Also notice
the &lt;strong&gt;padLeft&lt;/strong&gt;. That makes sure that we have 40 digits, each
hexadecimal character being 4-bits, giving us 160-bits. Check Wikipedia
and you&amp;rsquo;ll see that the SHA1 algorithm requires an output of 160-bits.&lt;/p&gt;

&lt;p&gt;This technique could be easily applied to any other hashing routine such
as MD5. Happy coding, and happy extending Groovy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing Groovy - Map to Key-Value Pair</title>
      <link>http://adampresley.com/post/enhancing-groovy-map-to-key-value-pair/</link>
      <pubDate>Tue, 30 Nov 2010 11:26:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/enhancing-groovy-map-to-key-value-pair/</guid>
      <description>&lt;p&gt;Here is another example of using Groovy&amp;rsquo;s metaClass abilities to extend
the language. In this scenario I have a need to convert a standard
&lt;strong&gt;Map&lt;/strong&gt; to a key-value pair, such as what would be used in an HTTP
POST. Continuing from my previous post about extending &lt;strong&gt;String&lt;/strong&gt; to
have the ability to URL encode itself, we will now extend &lt;strong&gt;Map&lt;/strong&gt; to
transform itself to a key-value pair. Paste this in your Groovy Console
and give it a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Thanks to Tim Yates for bringing up the &lt;em&gt;join()&lt;/em&gt;
command. Made it a lot cleaner!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encodeURL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;URLEncoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encode&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toKeyValuePair&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;collect&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${key.encodeURL()}=${value.toString().encodeURL()}&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;}.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sourceMap&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;a:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;b:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;c:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I_have 20% coverage of this &amp;amp; I want *lots* more.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;d:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Whatever!&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;sourceMap&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toKeyValuePair&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And with that simple extension we can now easily convert a &lt;strong&gt;Map&lt;/strong&gt;
to a key-value pair string. The astute among you may have noticed that
the value being added to the result string is using &lt;strong&gt;toString()&lt;/strong&gt;,
and that is the value of the key is not a string you may get an object
address, or other such wonderfulness. True enough this method is
limited, and could probably be enhanced to be more sophisticated, but
that is for another time. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing Groovy - URL Encoding Added to String&#39;s Metaclass</title>
      <link>http://adampresley.com/post/enhancing-groovy-url-encoding-added-to-strings-metaclass/</link>
      <pubDate>Mon, 29 Nov 2010 22:25:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/enhancing-groovy-url-encoding-added-to-strings-metaclass/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve talked before about enhancing the Groovy language through the
metaclass extension abilities. Here&amp;rsquo;s a short post that adds a handy
snippet to the Groovy String class to URL encode strings. Normally this
is done through the &lt;strong&gt;java.net.URLEncoder&lt;/strong&gt; class, but we are going
to add it to the string class so we can do something like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;someValue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This is some value&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;someKey&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${someKey.encodeURL()}=${someValue.encodeURL()}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems like a pretty handy feature. And doing this is super easy.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encodeURL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;net&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;URLEncoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encode&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;There are a couple of tricks behind this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;em&gt;metaClass&lt;/em&gt; attribute in Groovy is what allows us to extend the language. Pimp.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;encodeURL&lt;/em&gt; is a new method, attached as a closure.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;encode()&lt;/strong&gt; method does the real work. Notice no &lt;em&gt;return&lt;/em&gt; statement. Groovy returns the last value in the method. That would be the encoded string in this case.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And there you have it. Short, simple, and to the point. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rendering JSON with Groovy and Grails</title>
      <link>http://adampresley.com/post/rendering-json-with-groovy-and-grails/</link>
      <pubDate>Sun, 28 Nov 2010 23:25:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/rendering-json-with-groovy-and-grails/</guid>
      <description>&lt;p&gt;The other day I blogged about generating XML from domain classes in
Grails. Today I want to show how to do the same thing but with JSON
instead. JSON is widely used and accepted as a great way to exchange
information in AJAX and RESTful applications, and Grails makes it
mind-numbingly simple to do this.&lt;/p&gt;

&lt;p&gt;Grails provides a class called &lt;strong&gt;grails.converters.JSON&lt;/strong&gt;. This
class provides a DSL, or Domain Specific Language, for creating JSON, as
well as automatic marshaling of objects to JSON. In this sample I will
demonstrate the automatic marshaling technique, and show how to return
the JSON string back to the view, and even how to render it to the HTTP
output for AJAX applications. For the sake of demonstration let&amp;rsquo;s
pretend I have a &lt;strong&gt;Person&lt;/strong&gt; domain class, and I get a list of all
the records from the database. With this list of persons I want to build
an XML file that looks like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.adampresley.groovy.Person&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;nec.tempus.scelerisque@montesnascetur.ca&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Imogene&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Coffey&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.adampresley.groovy.Person&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;malesuada.malesuada.Integer@vitae.ca&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Marsden&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mcbride&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.adampresley.groovy.Person&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;neque.venenatis@ipsum.edu&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Jescie&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Vang&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.adampresley.groovy.Person&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Nullam@MorbimetusVivamus.org&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;August&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hewitt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.adampresley.groovy.Person&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Sed@mollisInteger.org&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Raven&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Gilmore&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pretty simple JSON structure. Now let&amp;rsquo;s look at that Person domain
class. You may remember this from my Grails and XML post.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;groovy&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;constraints&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blank:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blank:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${firstName} ${lastName}&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Nothing has changed here. Now let&amp;rsquo;s see how we can use the power of
Grails to easily transform an array of Person objects into JSON data.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;groovy&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grails.converters.JSON&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TransformationsController&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;personJSON:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;renderJson&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above controller has two methods, one for returning a JSON string,
and the other renders JSON to the HTTP output. As you can see it is
quite possibly the simplest thing you&amp;rsquo;ve ever done in your life. Cheers and
happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating XML in Groovy and Grails</title>
      <link>http://adampresley.com/post/generating-xml-in-groovy-and-grails/</link>
      <pubDate>Mon, 22 Nov 2010 23:26:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/generating-xml-in-groovy-and-grails/</guid>
      <description>&lt;p&gt;I was doing a little work in a project that spans a rather broad
spectrum of the technology scale. One application in Groovy, the other
is a Grails app, while another piece is ColdFusion. Overall a very
interesting project.&lt;/p&gt;

&lt;p&gt;One of the things I was working on is a sort of RESTful API, which is
the portion written in Grails, and I found myself needing to craft an
XML response that is essentially a domain-class transformed. I found
this exercise in Grails to be quite simple.&lt;/p&gt;

&lt;p&gt;Groovy provides a class called &lt;strong&gt;groovy.xml.MarkupBuilder&lt;/strong&gt;. This
class provides a DSL, or Domain Specific Language, for creating XML. The
syntax is actually quite easy and takes very little practice to become
natural. For the sake of demonstration let&amp;rsquo;s pretend I have a
&lt;strong&gt;Person&lt;/strong&gt; domain class, and I get a list of all the records from
the database. With this list of persons I want to build an XML file that
looks like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;people&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;person&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;firstname&amp;gt;&lt;/span&gt;Imogene&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;lastname&amp;gt;&lt;/span&gt;Coffey&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;email&amp;gt;&lt;/span&gt;nec.tempus.scelerisque@montesnascetur.ca&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;person&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;firstname&amp;gt;&lt;/span&gt;Marsden&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;lastname&amp;gt;&lt;/span&gt;Mcbride&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;email&amp;gt;&lt;/span&gt;malesuada.malesuada.Integer@vitae.ca&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;person&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;firstname&amp;gt;&lt;/span&gt;Jescie&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;lastname&amp;gt;&lt;/span&gt;Vang&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;email&amp;gt;&lt;/span&gt;neque.venenatis@ipsum.edu&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;person&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;firstname&amp;gt;&lt;/span&gt;August&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;lastname&amp;gt;&lt;/span&gt;Hewitt&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;email&amp;gt;&lt;/span&gt;Nullam@MorbimetusVivamus.org&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;person&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;firstname&amp;gt;&lt;/span&gt;Raven&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;lastname&amp;gt;&lt;/span&gt;Gilmore&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;email&amp;gt;&lt;/span&gt;Sed@mollisInteger.org&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/people&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pretty simple XML structure, but what does the domain class look
like?&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;groovy&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;constraints&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blank:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blank:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${firstName} ${lastName}&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So with that class, and an understanding of how I wanted the XML to
look, here&amp;rsquo;s how to use the &lt;strong&gt;MarkupBuilder&lt;/strong&gt; class to achieve
this.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;groovy&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groovy.xml.MarkupBuilder&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TransformationsController&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xml&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringWriter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;builder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MarkupBuilder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;people&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;persons&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;personXml:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Cheers and happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Real ANT Task</title>
      <link>http://adampresley.com/post/my-first-real-ant-task/</link>
      <pubDate>Tue, 16 Nov 2010 23:54:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/my-first-real-ant-task/</guid>
      <description>&lt;p&gt;&lt;em&gt;Notice: The opinions expressed on this blog entry are mine alone and
do not necessarily represent the views of my employer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that the employer notice is out of the way I can actually start
talking about what I wish to talk about. At work we have a big
initiative to put CFQUERYPARAM into our SQL statements that do not have
it. Since this code is quite old a large majority of it does not make
use of this handy tag, so as you might imagine it is a pretty big task
to go over 3,000 files and validate that CFQUERYPARAM was put everywhere
it needs to be.&lt;/p&gt;

&lt;p&gt;After the initial effort a coworker of mine created a series of regular
expressions to help validate the effort and point out any areas where we
may have done the work incorrectly. And lets be honest, staring at a
screen for 8 hours and looking for CFQUERY and variables in pound signs
can start to blur pretty quickly. Given these useful regexs I though it
would be neat to have a simple ANT script that would prompt for a
directory or file name resource and run these regexs against that
resource and create a report of any potential problem areas in an Excel
spreadsheet.&lt;/p&gt;

&lt;p&gt;To demonstrate lets take a look at what the ANT script itself looks
like.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!--?xml version=&amp;quot;1.0&amp;quot;?--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;CFQUERYPARAM Tester&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;default=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;basedir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;taskdef&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;queryParamChecker&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;classname=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;com.apihealthcare.opt.QueryParamChecker&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;

   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;message=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Please provide a directory path or file path to scan:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;addproperty=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;defaultvalue=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${basedir}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;

      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;queryparamchecker&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;path=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${path}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;outputfile=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\\anttasktestresults.xlsx&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/queryparamchecker&amp;gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/taskdef&amp;gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first thing to do is &amp;ldquo;import&amp;rdquo; a custom task called
&lt;strong&gt;queryParamChecker&lt;/strong&gt;. This is a custom ANT task that I have written
that scans a resource for potential problems based on a set of regular
expressions. We then make use of the &lt;strong&gt;input&lt;/strong&gt; task to prompt the user
for the resource name, a directory or file path, and then pass that to
the query param checker task.&lt;/p&gt;

&lt;p&gt;So how does one write a custom ANT task? For this I used Groovy, so I
started with a new Groovy project in Eclipse. I then added the following
JAR files to my classpath:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ant.jar&lt;/li&gt;
&lt;li&gt;commons-logging-1.1.jar&lt;/li&gt;
&lt;li&gt;dom4j-1.6.1.jar&lt;/li&gt;
&lt;li&gt;poi-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;poi-ooxml-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;poi-ooxml-schemas-3.7-beta3-20100924.jar&lt;/li&gt;
&lt;li&gt;xmlbeans-2.3.0.jar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These JAR files give us the Apache POI project for creating Excel
documents, as well as the necessary ANT classes for building a custom
ANT task. I then created a new package in my freshly created project and
called it &lt;strong&gt;com.apihealthcare.opt&lt;/strong&gt;. In this package I created a new
Groovy class named &lt;strong&gt;QueryParamChecker&lt;/strong&gt;. The first thing necessary to
creating a custom ANT task is to import the Apache ANT classes, then
extend the Task class. Your new class must override the &lt;strong&gt;execute()&lt;/strong&gt;
method, and provide &lt;strong&gt;setters&lt;/strong&gt; for each property your new task will
support.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;apihealthcare&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;opt&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.tools.ant.*&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;QueryParamChecker&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;

   &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BuildException&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setPath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setOutputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;outputFile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the skeleton for a custom ANT task. But I clearly wanted more
than a skeleton. I need it to check resources for errors in
CFQUERYPARAM. There are three pieces of information I used to do this.
The first is an array of regular expression object that are the meat and
potatoes of what we are trying to do here. The next is an array of file
extensions that are valid for us to check, so it contains &amp;ldquo;.cfm&amp;rdquo; and
&amp;ldquo;.cfc&amp;rdquo;. And finally I have an array of regular expressions that are used
to filter out any undesirable files or folders, as this application has
a number of old files that are no longer used. Here are those arrays.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * An array of regular expressions to check files against.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Modify this list to change the rules yo.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!list).)*&amp;gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;//~/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!cfsqltype).)*&amp;gt;/,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)(#\s*cfsqltype=|#\s*maxlength=|#\s*list=|#\s*value=)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)\sin(\s|\()[^&amp;gt;]*(value=&amp;quot;#listqualify|value=&amp;quot;#replace|value=&amp;quot;#preservesinglequotes)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)[^&amp;lt;]cfqueryparam/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)&amp;lt;cfqueryparam[^&amp;lt;&amp;gt;]*&amp;quot;\s*\/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[^&amp;gt;]&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#dateadd/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)&amp;lt;cfqueryparams/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)cfsqltype=&amp;quot;&amp;quot;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)(#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value|#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfsqltype&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;maxlength)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)order\s*by\s*&amp;lt;cfqueryparam/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)(cfqueryparamvalue|cfqueryparamcfsqltype|cfqueryparammaxlength|cfqueryparamlist)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/(?i)&amp;lt;cfqueryparam[^&amp;gt;]*(?=\/\s*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;charindex&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([^&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)]*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)[^&amp;lt;!-|&amp;lt;!]--[^&amp;gt;|-].*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.(?!(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hasPermission&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;usersession&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;An&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;extensions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ignore&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;private def validExtensions = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   &amp;quot;.cfm&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   &amp;quot;.cfc&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patterns&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ignore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;private def ignores = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;unused_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(.*)/&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;From here I created two functions. The first will check a single file
for errors against the regexs, and the second will recurse a directory
structure. They are both very similar, and likely could have been
written more reusable, but for now they do the trick. Essentially these
functions will read the text from the file and compare it against each
regular expression in the &lt;strong&gt;checks&lt;/strong&gt; array. If there are matches
they are stored in a structure and put into the &lt;strong&gt;badCodeResults&lt;/strong&gt;
array.&lt;/p&gt;

&lt;p&gt;After these are done the &lt;strong&gt;_writeOutputFile()&lt;/strong&gt; method is called to
take the items in &lt;strong&gt;badCodeResults&lt;/strong&gt; and place them into an Excel
spreadsheet. To do this you first create an &lt;strong&gt;XSSFWorkbook&lt;/strong&gt;, an
&lt;strong&gt;XSSFCreationHelper&lt;/strong&gt;, and an &lt;strong&gt;XSSFSheet&lt;/strong&gt; object. The sheet
is created off the workbook; essentially it creates a new worksheet in
the workbook in Excel. The I loop over the &lt;strong&gt;badCodeResults&lt;/strong&gt; and
create cells for the file path, the offending text, and the start and
end locations of the offending text location. To top it off I then write
the file to disk.&lt;/p&gt;

&lt;p&gt;Below is the task in its entirety. You can also &lt;a href=&#34;http://dl.dropbox.com/u/5726689/blog-downloads/ApiAntTasks.zip&#34;&gt;download the soure code here&lt;/a&gt;. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;apihealthcare&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;opt&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.tools.ant.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groovy.io.FileType&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.poifs.filesystem.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.xssf.extractor.*&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.apache.poi.xssf.usermodel.*&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;QueryParamChecker&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputFile&lt;/span&gt;

   &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * An array of regular expressions to check files against.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * Modify this list to change the rules yo.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    */&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!list).)*&amp;gt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;//~/(?i)in\s*\(\s*&amp;lt;cfqueryparam((?!cfsqltype).)*&amp;gt;/,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)(#\s*cfsqltype=|#\s*maxlength=|#\s*list=|#\s*value=)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)\sin(\s|\()[^&amp;gt;]*(value=&amp;quot;#listqualify|value=&amp;quot;#replace|value=&amp;quot;#preservesinglequotes)/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)[^&amp;lt;]cfqueryparam/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)&amp;lt;cfqueryparam[^&amp;lt;&amp;gt;]*&amp;quot;\s*\/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[^&amp;gt;]&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#dateadd/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)&amp;lt;cfqueryparams/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)cfsqltype=&amp;quot;&amp;quot;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)(#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value|#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfsqltype&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;maxlength)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)order\s*by\s*&amp;lt;cfqueryparam/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)(cfqueryparamvalue|cfqueryparamcfsqltype|cfqueryparammaxlength|cfqueryparamlist)/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/(?i)&amp;lt;cfqueryparam[^&amp;gt;]*(?=\/\s*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;charindex&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([^&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)]*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)[^&amp;lt;!-|&amp;lt;!]--[^&amp;gt;|-].*&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cfqueryparam&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.(?!(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hasPermission&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;usersession&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;An&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;extensions&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ignore&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   private def validExtensions = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      &amp;quot;.cfm&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      &amp;quot;.cfc&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;patterns&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ignore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   private def ignores = [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      ~/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(?&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)(.*?)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;unused_&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(.*)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   ]&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   @Override&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   public void execute() throws BuildException {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def fileCheck = new File(this.path)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def result = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      if (fileCheck.isFile()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         result = _doFile()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      else if (fileCheck.isDirectory()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         result = _doDirectory()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      else&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         throw new Exception(&amp;quot;The path passed in doesn&amp;#39;t seem to be a file or a directory!&amp;quot;)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      _writeOutputFile(result)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   public void setPath(String path) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      this.path = path&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   public void setOutputFile(String outputFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      this.outputFile = outputFile&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _doFile() {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badCodeResults = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;searching&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def f = new File(this.path)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      assert f.isFile()&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def filesProcessed = 0&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badFiles = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def printed = false&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;particular&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;If&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;validFile&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      validExtensions.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (f.name.endsWith(it)) validFile = true&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      ignores.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         def ignoreMe = f.name ==~ it&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (validFile != false &amp;amp;&amp;amp; ignoreMe) validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Enter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      if (validFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         filesProcessed++&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;looping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;wish&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;against&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         checks.each { regex -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def matcher = f.text =~ regex&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def index = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;            /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matches&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            while (matcher.find()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;have&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Put&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               if (matcher.group(0) != null &amp;amp;&amp;amp; matcher.group(0) != &amp;quot;&amp;quot;) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  if (!printed) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     println &amp;quot;File: ${f.name}...&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     badFiles++&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  printed = true&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;                  badCodeResults &amp;lt;&amp;lt; [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     filePath: f.getAbsolutePath(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     offendingText: matcher.group(0),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     start: matcher.start(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     end: matcher.end()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  ]&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;Processed ${filesProcessed} file(s)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;${badFiles} bad file(s) found&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _doDirectory() {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badCodeResults = []&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;searching&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def rootPath = this.path&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def codeBase = new File(rootPath)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      assert codeBase.isDirectory()&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def filesProcessed = 0&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def badFiles = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Iterate&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      codeBase.eachFileRecurse FileType.FILES, { f -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      def printed = false&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;about&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;particular&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;If&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;validFile&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      validExtensions.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (f.name.endsWith(it)) validFile = true&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      ignores.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         def ignoreMe = f.name ==~ it&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         if (validFile != false &amp;amp;&amp;amp; ignoreMe) validFile = false&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Enter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;here&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;care&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      if (validFile) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         filesProcessed++&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Start&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;looping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;wish&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;against&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         checks.each { regex -&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def matcher = f.text =~ regex&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            def index = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;            /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matches&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            while (matcher.find()) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;have&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Put&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;into&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               if (matcher.group(0) != null &amp;amp;&amp;amp; matcher.group(0) != &amp;quot;&amp;quot;) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  if (!printed) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     println &amp;quot;File: ${f.name}...&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     badFiles++&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  printed = true&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;                  badCodeResults &amp;lt;&amp;lt; [&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     filePath: f.getAbsolutePath() - rootPath,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     offendingText: matcher.group(0),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     start: matcher.start(),&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                     end: matcher.end()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;                  ]&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;Processed ${filesProcessed} file(s)&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      println &amp;quot;${badFiles} bad file(s) found&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;   }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;   private def _writeOutputFile(badCodeResults) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;workbook&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFWorkbook wb = new XSSFWorkbook()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFCreationHelper helper = wb.getCreationHelper()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      XSSFSheet sheet = wb.createSheet(&amp;quot;Search Results&amp;quot;)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      def rowIndex = 0&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Loop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bad&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;write&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;them&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rows&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Excel&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sheet&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      badCodeResults.each {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         XSSFRow row = sheet.createRow(rowIndex++)&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(0).setCellValue(helper.createRichTextString(it.filePath))&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(1).setCellValue(helper.createRichTextString(it.offendingText))&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(2).setCellValue(it.start)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;         row.createCell(3).setCellValue(it.end)&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;      }&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;      /&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Write&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Note&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
       &lt;span style=&#34;color: #f92672&#34;&gt;*/&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;outputFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;wb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Output results written to ${this.outputFile}&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Priority Queue in Groovy</title>
      <link>http://adampresley.com/post/using-a-priority-queue-in-groovy/</link>
      <pubDate>Mon, 08 Nov 2010 22:04:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/using-a-priority-queue-in-groovy/</guid>
      <description>&lt;p&gt;Although the title suggests something specific to Groovy the concept
demonstrated in this example will work in good old Java too, with a
couple of tweaks of course. In this blog entry we will look at what a
priority queue is, and how we can use Java to implement one.&lt;/p&gt;

&lt;p&gt;Imagine we need to implement a ticket processing system where we need to
process ticket holder information. Further imagine that we need to
process these ticket holders in order of priority, and priority is
defined by the type of ticket that was purchased. For this demonstration
we will have the following ticket types and priorities, with a lower
priority number being a higher priority: Priority Club (1), Season
Ticket-holder (2), Online Purchase (3), and Ticket Booth (4). The first
thing to do is define an enumerator that provides these very definitions
we just laid out.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;PriorityQueueExample&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;TICKET_BOOTH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ticket Booth&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;),&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;ONLINE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Online Purchase&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;),&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;SEASON_TICKETS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Season Ticket-holder&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;),&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;PRIORITY_CLUB&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Priority Club&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;priority&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;priority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;priority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toInteger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;value&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;priority&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have an enumeration for ticket types we should probably
define a ticket holder. For this example a ticket holder will be really
simple, providing a name and the ticket type they hold. We will also
override the &lt;strong&gt;toString()&lt;/strong&gt; method to ensure that when we print this
object to the console we see the &amp;ldquo;pretty&amp;rdquo; version. Here&amp;rsquo;s that code.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;PriorityQueueExample&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TicketHolder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ticketType&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TICKET_BOOTH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ticketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ticketType&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ticketType&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${name} (${ticketType.toString()})&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And once we have this guy defined let&amp;rsquo;s put it to the test. The
&lt;strong&gt;java.util&lt;/strong&gt; package offers a class called &lt;strong&gt;PriorityQueue&lt;/strong&gt;
that offers a means to add items to a queue that are sorted by some
comparison. By default, if you do not provide a comparator, natural
sorting is used. In our case we will provide a comparator that will
first compare by priority. If the priority between two items is the same
we will then sort by name. In the final example we create this queue,
then add a bunch of ticket holders to it. The final block of code will
loop and call &lt;strong&gt;poll()&lt;/strong&gt; until we have no more items. Each call to
&lt;strong&gt;poll()&lt;/strong&gt; will give us the next item in the queue.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;PriorityQueueExample&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Create a priority queue with a comparator to determine what has priority.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * If the priority is the same, sort by name as a secondary sort.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ticketholder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;compare&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;holder1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getTicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getTicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getTicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;holder2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getTicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;})&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Add a couple of regular buyers who bought tickets from&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * the ticket booth.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ben Nadel&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TICKET_BOOTH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ray Camdem&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TICKET_BOOTH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Now add somebody who bough a ticket online. This person gets&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * ahead in line before the other two.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Maryanne Anello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ONLINE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Add a &amp;quot;Priority Club&amp;quot; member. This takes precedence in line ahead&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * of all the other people.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Adam Presley&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;PRIORITY_CLUB&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Now add a season ticket holder, and another online buyer.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Season ticket holders go in line before online.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Cameron Duke&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;SEASON_TICKETS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketHolder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Jesse Roach&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TicketType&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ONLINE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;


      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Display our queue as it currently stands.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You will notice when you run this example that the items are &lt;strong&gt;not&lt;/strong&gt;
in the order we inserted them, but instead are in order of priority.
Pretty cool eh? Happy coding!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy&#39;s MetaClass - Enhancing the Language</title>
      <link>http://adampresley.com/post/groovys-metaclass-enhancing-the-language/</link>
      <pubDate>Mon, 01 Nov 2010 04:19:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/groovys-metaclass-enhancing-the-language/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a little tidbit I wanted to share which demonstrates one of the
coolest bits about Groovy. Similar to how one can use prototyping in
JavaScript to enhance existing objects Groovy allows us to modify
existing classes using the &lt;strong&gt;metaClass&lt;/strong&gt; property. In the next
example I will demonstrate how I created a new method against the
&lt;strong&gt;String&lt;/strong&gt; class to execute the contents of the string using the
javax scripting engine: in other words I execute Groovy code
dynamically. Let&amp;rsquo;s take a look at the code first.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;adampresley&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.script.ScriptContext&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.script.ScriptEngine&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.script.ScriptEngineManager&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.script.ScriptEngineFactory&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;ScriptEngineManager&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;manager&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;ScriptEngine&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;engine&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;

   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;manager&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ScriptEngineManager&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;engine&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;manager&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getEngineByName&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;groovy&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bindings&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;engine&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createBindings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;putAll&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bindings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;

         &lt;span style=&#34;color: #f8f8f2&#34;&gt;engine&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;setBindings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ScriptContext&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ENGINE_SCOPE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;engine&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delegate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our constructor you can see how we first instantiate the Groovy
script engine using the &lt;em&gt;javax.script.ScriptEngineManager&lt;/em&gt; class. We
then, using the &lt;strong&gt;metaClass&lt;/strong&gt; property, add a new method named
&lt;strong&gt;run&lt;/strong&gt; that takes a single argument which takes a Map of parameters
to bind to the script engine. This allows us to execute the text in the
string as Groovy code, and pass in a Map of parameters that our script
can use. Let&amp;rsquo;s look at a sample usage.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;adam&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;danable&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;dood&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;source.findAll { it.contains(&amp;#39;da&amp;#39;) }&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;([&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// assert [ &amp;quot;adam&amp;quot;, &amp;quot;danable&amp;quot; ] == result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s just the surface. I barely understand how all this magic
works, but I know it has come in handy for me. Why? There are various
reasons you would want to dynamically execute code, including libraries
for other languages, DSLs from code in a database, etc&amp;hellip; Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy Script to Generate JSON from CFSCRIPT</title>
      <link>http://adampresley.com/post/groovy-script-to-generate-json-from-cfscript/</link>
      <pubDate>Mon, 25 Oct 2010 04:52:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/groovy-script-to-generate-json-from-cfscript/</guid>
      <description>&lt;p&gt;Today I was working on a bit of code that had a big SWITCH statement in
CFSCRIPT in ColdFusion that for each case would go through the motions
of registering some input parameters, then getting a reference to a
controller, or handler, for the specified input request. That code
looked a little something like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;switch (arguments.action) {
   case &amp;quot;action&amp;quot;:
      result.controller = __controller(&amp;quot;test.actionHandler&amp;quot;);
      __registerParameters(&amp;quot;param1,param2&amp;quot;);
      break;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In an effort to change how this portion of code works I wanted to take
all of these CASE statements and turn them into a JSON structure that
looks like so.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;test.actionHandler&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;param1,param2&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would allow me to read the file, deserialize the JSON, then
instantiate and execute the correct handler without having them defined
in code.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to hand-type all of these, however, so I opened up the
GroovyConsole and created a little script to automate this task. Here&amp;rsquo;s
the code.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentAction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentController&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundCase&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:/code/app/ControllerFactory.cfc&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachLine&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;foundCase&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;case \&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundCase&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)case &amp;quot;(.*?)&amp;quot;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentAction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

         &lt;span style=&#34;color: #f8f8f2&#34;&gt;println&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Action: ${currentAction}&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;foundParams&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)&amp;quot;(.*?)&amp;quot;/&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;break&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundCase&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;action:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentAction&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;controller:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentController&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)__controller\(&amp;quot;(.*?)&amp;quot;\)/&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentController&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

         &lt;span style=&#34;color: #75715e&#34;&gt;// single line registration&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)__registerParameters\(&amp;quot;(.*?)&amp;quot;\)/&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

         &lt;span style=&#34;color: #75715e&#34;&gt;// Multi-line registration&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/(?i)__registerParameters\(/&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;foundParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentParams&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
         &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Write the results out to a definition file.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:/definitions.json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createNewFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{\n&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;eachWithIndex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;actionItem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\t\&amp;quot;${actionItem.action}\&amp;quot;: {\n&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\t\t\&amp;quot;controller\&amp;quot;: \&amp;quot;${actionItem.controller}\&amp;quot;,\n&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\t\t\&amp;quot;parameters\&amp;quot;: \&amp;quot;${actionItem.params}\&amp;quot;\n&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\t},\n&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\t}\n&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;With this script I read the CFC in one line at a time and when I find a
CASE statement I start looking for the controller definition and the
parameters, if any. It&amp;rsquo;s mostly a lot of regexs, but overall a simple
script.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>