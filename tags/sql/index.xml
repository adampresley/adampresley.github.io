<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Adam.Blog()</title>
    <link>http://adampresley.com/tags/sql/</link>
    <description>Recent content in Sql on Adam.Blog()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Aug 2011 22:39:00 +0000</lastBuildDate>
    <atom:link href="http://adampresley.com/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL Server 2008 Batch Inserts and Identity Columns</title>
      <link>http://adampresley.com/post/sql-server-2008-batch-inserts-and-identity-columns/</link>
      <pubDate>Mon, 29 Aug 2011 22:39:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/sql-server-2008-batch-inserts-and-identity-columns/</guid>
      <description>&lt;p&gt;As most are aware SQL Server 2008 supports batch inserts, much like
MySQL has for a billion years. Basically this is the ability to insert
multiple records in a single statement like so.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;people&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;age&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;VALUES&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Presley&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Schmo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That feature of course rocks, but I wasn&amp;rsquo;t quite sure how to then
retrieve all my new IDs on an identity column for this batch of inserts.
Turns out this isn&amp;rsquo;t too hard. See the highlighted lines in the example
below, and you will note that this is pretty simple actually. Happy
coding!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NULL&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;people&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;age&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;OUTPUT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INSERTED.id&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;results&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VALUES&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Presley&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Schmo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;results;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>INSERT or UPDATE in MySQL</title>
      <link>http://adampresley.com/post/insert-or-update-in-mysql/</link>
      <pubDate>Thu, 25 Aug 2011 23:25:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/insert-or-update-in-mysql/</guid>
      <description>&lt;p&gt;Tonight I &lt;strong&gt;finally&lt;/strong&gt; got to use the very awesome &lt;em&gt;ON DUPLICATE KEY
UPDATE&lt;/em&gt; feature in MySQL. If you are wondering this is a great feature in
MySQL that allows you, in one statement, to insert a record, and if that
record already exists, update it instead. The criteria for already
existing is based on checking primary and unique keys on the record.&lt;/p&gt;

&lt;p&gt;The only question that wasn&amp;rsquo;t clearly answered by MySQL&amp;rsquo;s documentation
for me was how *autoincrement*fields behave. Turns out this is pretty
easy. For demonstration purposes assume that we have a table with &lt;em&gt;id&lt;/em&gt;,
&lt;em&gt;firstName&lt;/em&gt;, &lt;em&gt;lastName&lt;/em&gt;, and &lt;em&gt;age&lt;/em&gt;. The ColdFusion snippet below will
not only insert a new record if one does not already exist, it will
update an existing one if an existing ID is passed in. The sample
function takes a single structure as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;::cfm
&amp;lt;cffunction name=&amp;quot;savePerson&amp;quot; output=&amp;quot;false&amp;quot;&amp;gt;
    &amp;lt;cfargument name=&amp;quot;person&amp;quot; /&amp;gt;

    &amp;lt;cfset var qrySave = &amp;quot;&amp;quot; /&amp;gt;

    &amp;lt;cfquery name=&amp;quot;qrySave&amp;quot; datasource=&amp;quot;#application.dsn#&amp;quot;&amp;gt;
        INSERT INTO persons (
            id
            , firstName
            , lastName
            , age
        ) VALUES (
            &amp;lt;cfqueryparam value=&amp;quot;#arguments.person.id#&amp;quot; cfsqltype=&amp;quot;CF_SQL_INTEGER&amp;quot; /&amp;gt;
            , &amp;lt;cfqueryparam value=&amp;quot;#arguments.person.firstName#&amp;quot; cfsqltype=&amp;quot;CF_SQL_VARCHAR&amp;quot; maxlength=&amp;quot;50&amp;quot; /&amp;gt;
            , &amp;lt;cfqueryparam value=&amp;quot;#arguments.person.lastName#&amp;quot; cfsqltype=&amp;quot;CF_SQL_VARCHAR&amp;quot; maxlength=&amp;quot;50&amp;quot; /&amp;gt;
            , &amp;lt;cfqueryparam value=&amp;quot;#arguments.person.age#&amp;quot; cfsqltype=&amp;quot;CF_SQL_INTEGER&amp;quot; /&amp;gt;
        )
        ON DUPLICATE KEY UPDATE
            id=LAST_INSERT_ID(id)
            , firstName=&amp;lt;cfqueryparam value=&amp;quot;#arguments.person.firstName#&amp;quot; cfsqltype=&amp;quot;CF_SQL_VARCHAR&amp;quot; maxlength=&amp;quot;50&amp;quot; /&amp;gt;
            , lastName=&amp;lt;cfqueryparam value=&amp;quot;#arguments.person.lastName#&amp;quot; cfsqltype=&amp;quot;CF_SQL_VARCHAR&amp;quot; maxlength=&amp;quot;50&amp;quot; /&amp;gt;
            , age=&amp;lt;cfqueryparam value=&amp;quot;#arguments.person.age#&amp;quot; cfsqltype=&amp;quot;CF_SQL_INTEGER&amp;quot; /&amp;gt;;

        SELECT LAST_INSERT_ID() as newId;
    &amp;lt;/cfquery&amp;gt;

    &amp;lt;cfset arguments.person.id = qrySave.newId /&amp;gt;
    &amp;lt;cfreturn arguments.person /&amp;gt;
&amp;lt;/cffunction&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The highlighted lines are of interest. Line 18 is where the magic
happens. This is what tells MySQL that we want to update instead of
insert when an existing record is found. Line 19 is a trick that will
set the LAST_INSERT_ID() variable in MySQL to the existing ID in the
event of an update. Line 24 simply gets the last inserted ID, and if
this turned out to be an update, gets the ID from line 19.&lt;/p&gt;

&lt;p&gt;Please note that if the *id*column is an autoincrement, and you pass a
non-existent ID, that&amp;rsquo;s OK. It will simply ignore what you pass in to
it, and generate a new ID.&lt;/p&gt;

&lt;p&gt;MySQL == nice. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MSSQL Script to Generate Random SSN</title>
      <link>http://adampresley.com/post/mssql-script-to-generate-random-ssn/</link>
      <pubDate>Sun, 26 Sep 2010 22:33:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/mssql-script-to-generate-random-ssn/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve ever worked with a database that contains sensitive data you
may have had the task of &amp;ldquo;scrubbing&amp;rdquo;, or cleaning the data so it can be
used by the average developer and QA engineer. Last week I was working
on setting up a testing server and received a &amp;ldquo;scrubbed&amp;rdquo; database from
our database team. They had taken and cleaned up all the sensitive data.
For the social security numbers they had changed each one to
&amp;ldquo;111-11-1111&amp;rdquo;. This is normally fine, but we ran into a ColdFusion page
that was querying for all duplicate SSNs, and displaying links on the
page to alert a user to go and correct the duplicate entry. This would
normally been innocent enough except that there were over 600,000
entries in the system, and caused Internet Explorer to live up to its
nickname, Internet Exploder.&lt;/p&gt;

&lt;p&gt;To correct this I crafted a simple SQL script to randomize the SSNs,
making the data feel a bit more natural, and the page not crash. Here it
is.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;newSSN&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;CURSOR&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;personTable&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;OPEN&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NEXT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;WHILE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FETCH_STATUS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;BEGIN&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;newSSN&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;898&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RAND())&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RAND())&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CAST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8998&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RAND())&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PRINT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;newSSN&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;personTable&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;SSN&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;newSSN&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;WHERE&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NEXT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;END&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;CLOSE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;DEALLOCATE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pcursor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This little script simple gets a cursor for all the people in our table
and iterates over them. For each iteration we create a random SSN value
using the RAND() function and casting them to VARCHARs. We update the
value in the table, grab the next record from the cursor, and
rinse/lather/repeat until we are done.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimenting with SQL to JSON in SQL Server 2008</title>
      <link>http://adampresley.com/post/experimenting-with-sql-to-json-in-sql-server-2008/</link>
      <pubDate>Wed, 14 Jul 2010 03:37:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/experimenting-with-sql-to-json-in-sql-server-2008/</guid>
      <description>&lt;p&gt;In the last couple of days at work my friend Adrian (@iknowkungfoo) and
I (@adampresley) have been tossing around how we can improve performance
on various portions of the application we work on. On of the trouble
areas has always been large query sets that then have to be transformed
into JSON for an AJAX response.&lt;/p&gt;

&lt;p&gt;One little feature introduced in SQL Server 2005 that I had completely
forgot about is the ability to take a given query result set and turn it
into XML. It&amp;rsquo;s a very nifty feature, and once Adrian reminded me of this
some thoughts started to take shape. First let&amp;rsquo;s look at how the XML
feature works. Below is a query that I ran against a test database that
contains address information. Below that is a screenshot of how the
result set looks using the XML feature.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;email&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;phone&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;postalCode&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;address&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BY&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;XML&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;AUTO,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ROOT(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, so that&amp;rsquo;s pretty cool. So what I&amp;rsquo;ve done so far is write a .NET
assembly that I register in SQL Server, wrap a SQL function around the
.NET method, and am using this to turn the XML from the query into JSON.
For more info on creating and registering a .NET method in SQL server
see my previous post &lt;a href=&#34;http://blog.adampresley.com/2009/writing-csharp-functions-for-sql-server-and-clr-integration/&#34;&gt;Writing C# Functions for SQL Server and CLR
Integration&lt;/a&gt;.
So without any ado here is the code for the assembly.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Data;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Data.SqlTypes;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Data.SqlClient;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Microsoft.SqlServer.Server;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Collections.Generic;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Linq;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.IO;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Xml;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Xml.XPath;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * The JSONTransformer class provides methods to encode XML datasets&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * into JSON. These methods are intended to be used by a&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Microsoft SQL Server 2005 or higher.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @author Adam Presley&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;JSONTransformer&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * This method takes an XML dataset and serializes it to a&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * JSON string acceptable for AJAX/client use.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * &amp;lt;code&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * DECLARE @resultSetXML VARCHAR(max);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * DECLARE @rootNodeName VARCHAR(75);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * DECLARE @elementNodeName VARCHAR(75);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * DECLARE @result VARCHAR(max);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * SET @rootNodeName = &amp;#39;addresses&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * SET @elementNodeName = &amp;#39;address&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * SET @resultSetXML = (&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *     SELECT&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         id&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         , firstName&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         , lastName&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         , email&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         , phone&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         , postalCode&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * FROM address&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *     ORDER BY&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *         firstName, lastName&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * FOR XML AUTO, ROOT(&amp;#39;addresses&amp;#39;));&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * SELECT dbo.SQLJsonEncode(@resultSetXML, @rootNodeName, @elementNodeName) AS jsonResult;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * &amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    *&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @author Adam Presley&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @param resultSetXML - The SQL result set serialized to XML&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @param rootNodeName - The name of the XML root node&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @param elementNodeName - The name of a record&amp;#39;s XML node&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @returns A string containing the resultset as JSON.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    */&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;   [SqlFunction()]&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Encode&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;resultSetXML,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rootNodeName,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;elementNodeName)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;XmlDocument&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xmlDoc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;XmlDocument();&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;DataSet&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dataset&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DataSet();&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder();&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;recordCount&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentIndex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       * Create an XPath iterator.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;       */&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;XmlTextReader&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;XmlTextReader(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringReader(resultSetXML));&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;XPathDocument&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xdoc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;XPathDocument(reader);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;XPathNavigator&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nav&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xdoc.CreateNavigator();&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;XPathNodeIterator&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nav.Select(rootNodeName&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;elementNodeName);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;recordCount&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter.Count;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentIndex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{ \&amp;quot;recordcount\&amp;quot;: \&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;recordCount.ToString()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\&amp;quot;, \&amp;quot;data\&amp;quot;: [ &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(iter.MoveNext())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;XPathNavigator&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter.Current;&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{ &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

         &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;          * If we have attributes iterate over them and add them to&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;          * the JSON object.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;          */&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(item.HasAttributes)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;item.MoveToFirstAttribute();&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item.Name;&lt;/span&gt;
               &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item.Value;&lt;/span&gt;

               &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\&amp;quot;: \&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__jsonEscape(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(item.MoveToNextAttribute());&lt;/span&gt;

            &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;             * Remove trailing comma&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;             */&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line.Substring(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(line);&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

         &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(currentIndex&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;recordCount&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentIndex++;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; ]}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader.Close();&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.ToString();&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * This method escapes a string in a format suitable&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * for JSON and JavaScript.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @author Adam Presley&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @param data - The piece of data to JavaScript encode&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    * @returns A string properly encoded for JavaScript&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;    */&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__jsonEscape&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data;&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result;&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we can run a query or proc something like this to see JSON data.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;resultSetXML&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rootNodeName&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;elementNodeName&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VARCHAR(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rootNodeName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;elementNodeName&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;resultSetXML&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;email&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;phone&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;postalCode&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;address&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BY&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
   &lt;span style=&#34;color: #66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;XML&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;AUTO,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ROOT(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dbo.SQLJsonEncode(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;resultSetXML,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rootNodeName,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;elementNodeName)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jsonResult;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Pretty cool! Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Insert Multiple Records in one Insert Statement in MSSQL</title>
      <link>http://adampresley.com/post/how-to-insert-multiple-records-in-one-insert-statement-in-mssql/</link>
      <pubDate>Wed, 05 May 2010 21:17:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/how-to-insert-multiple-records-in-one-insert-statement-in-mssql/</guid>
      <description>&lt;p&gt;A friend showed me this trick a year or two ago, and it has come in
handy once again. In Microsoft SQL Server 2005 and higher if you need to
insert more than one record into a database table in a single statement
(kind of like how MySQL has), here is how you can do it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;contacts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;firstName&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lastName&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;title&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Presley&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Senior Software Engineer&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ALL&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Ben&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Nadel&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ColdFusion Awesome Dude&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that this solution starts off with a basic INSERT statement, then
uses a SELECT statement to provide the values. The trick here is to do a
&lt;strong&gt;UNION ALL&lt;/strong&gt; for each additional record you wish to insert. Pretty cool
eh? Happy coding!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Prettier Query to JSON for ColdFusion using Groovy</title>
      <link>http://adampresley.com/post/a-prettier-query-to-json-for-coldfusion-using-groovy/</link>
      <pubDate>Tue, 22 Sep 2009 07:46:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/a-prettier-query-to-json-for-coldfusion-using-groovy/</guid>
      <description>&lt;p&gt;ColdFusion 8 introduced the ability to serialize data structures,
arrays, and queries to JSON notation, making building AJAX-enabled
applications even easier. There are a couple of annoyances, however,
that still persist, and simply drive me nuts. Take the following query
as an example.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;SELECTs.state_id, s.stateName, s.stateAbbrevFROM states AS sORDER BY s.state
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you use the &lt;a href=&#34;http://livedocs.adobe.com/coldfusion/8/htmldocs/functions_s_03.html&#34;&gt;serializeJson()&lt;/a&gt; method in ColdFusion, you get a
JSON structure that looks something like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;COLUMNS&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;STATE_ID&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;STATENAME&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;STATEABBREV&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DATA&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;52&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Alabama&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;53&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Alaska&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AK&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;54&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Arizona&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AZ&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No, that isn&amp;rsquo;t the entire US state list because I truncated it for
demonstration purposes. What you see here, however, is a key named
&amp;ldquo;DATA&amp;rdquo; that is an array or arrays. Each sub-array is the actual row of
data. Also notice that everything is capitalized. Ick. Now I don&amp;rsquo;t know
if you are like me, but I like mine to look a little something more like
this.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Alabama&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateAbbrev&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;state_id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;52.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Alaska&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateAbbrev&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AK&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;state_id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;53.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;},{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Arizona&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stateAbbrev&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AZ&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;state_id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;54.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In this example we have an array of objects. Each object is a row of
data, and the keys are the column names. Also note that the column names
are cased the way I like them, and not capitalized like ColdFusion tends
to do. Here&amp;rsquo;s how.&lt;/p&gt;

&lt;p&gt;By using a little &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; and my modification to allow &lt;a href=&#34;|filename|/cfgroovy2-and-arguments-scope-in-functions&#34;&gt;binding the
arguments collection&lt;/a&gt; we can use the metadata from the query&amp;rsquo;s
underlying &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/java/sql/ResultSet.html&#34;&gt;ResultSet&lt;/a&gt; Java object to get the column names as they
were sent to the SQL server, preserving case. Check it out.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;def result = []
def metadata = arguments.query.getMetaData()
def numCols = metadata.getColumnCount()

while (arguments.query.next()) {
	row = [:]
	(1..numCols).each {
		index -&amp;gt;

		def colName = metadata.getColumnName(index)
		def value = arguments.query.getString(index).toString()
		row.put(colName, (arguments.query.wasNull()) ? &amp;quot;&amp;quot; : value)
	}

	result.add((coldfusion.runtime.Struct) row)
}

arguments.result = result;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To break this down we start with a blank array called &lt;em&gt;result&lt;/em&gt;. Then we
need to get the query&amp;rsquo;s metadata using the &lt;strong&gt;getMetaData()&lt;/strong&gt; method, as
well as how many columns we have by calling &lt;strong&gt;getColumnCount()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then we iterate over query rows by calling the &lt;strong&gt;next()&lt;/strong&gt; method. In the
loop we create a blank structure that will represent a row of data. We
then iterate from 1 to the number of query columns, grab the column name
and value, and put it into the &lt;em&gt;row&lt;/em&gt; structure by name. After we have
our row built we add it to the &lt;em&gt;result&lt;/em&gt; array. The final piece is to
call ColdFusion&amp;rsquo;s own &lt;strong&gt;serializeJson()&lt;/strong&gt; method to turn this array of
structures into JSON.&lt;/p&gt;

&lt;p&gt;Viola! Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing C# Functions for SQL Server and CLR Integration</title>
      <link>http://adampresley.com/post/writing-c-functions-for-sql-server-and-clr-integration/</link>
      <pubDate>Tue, 15 Sep 2009 10:46:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/writing-c-functions-for-sql-server-and-clr-integration/</guid>
      <description>&lt;p&gt;An interested problem was presented to me today where a database table
in SQL Server 2005 (now moved to 2008) had a trigger attached to a table
that would encrypt a credit card number on insert or update. The
encryption routine used the sp_OACreate stored procedure to make use of
an older Microsoft cryptography library called CAPICOM. With the move to
SQL Server 2008, however, we also upgraded our OS to 64-bit Windows. It
turns out that this CAPICOM component does not have support for the
64-bit world, and started to cause a world of hurt, causing credit card
numbers to not go into the database. This, or course, is bad.&lt;/p&gt;

&lt;p&gt;So I now decided that to tackle this problem I would make use of SQL
Server&amp;rsquo;s ability to access .NET assemblies and their methods. The first
order of business to get this started is to enable CLR integration in
your SQL Server instance. By default this is disabled, so two simple
statements will do the trick to turn it on.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sp_configure&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;clr enabled&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;reconfigure&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that you have CLR integration turned on let&amp;rsquo;s get to the fun stuff.
Code. Fire up your C# environment ladies! Now, if you are like me, and
you don&amp;rsquo;t have the super cool Enterprise edition of Visual Studio, you
will have to make due without all the little helper wizards that handle
deployment of your code to a SQL Server instance, and you will have to
do it manually. Don&amp;rsquo;t worry, it isn&amp;rsquo;t hard.&lt;/p&gt;

&lt;p&gt;First, create a new Class Library project. This will create a project
that contains a file named &amp;ldquo;Class.cs&amp;rdquo;. I normally rename that to
something nicer, like &amp;ldquo;Crypto.cs&amp;rdquo;. C# will also create a namespace
definition for your new project by default. In our case we won&amp;rsquo;t be
needing that, so remove it (don&amp;rsquo;t forget your open and close curly
braces).&lt;/p&gt;

&lt;p&gt;From here we will need a few references for our project. Those are:
System, System.Data.SqlTypes, System.Security.Cryptography, System.Text,
System.IO, and Microsoft.SqlServer.Server. That will look like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.IO;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Data.SqlTypes;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Microsoft.SqlServer.Server;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Security.Cryptography;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SQL Server expects a class defined as &lt;strong&gt;partial&lt;/strong&gt;, and a series of
methods that are &lt;strong&gt;public static&lt;/strong&gt;, and have the attribute
&lt;strong&gt;[SqlFunction()]&lt;/strong&gt; for creating a .NET managed function for SQL Server.
Functions are easy to implement because they simply return simple
values, unlike stored procedures (which is beyond the scope of this
post).&lt;/p&gt;

&lt;p&gt;For this example I will be creating two functions: Encrypt and Decrypt.
Each function that we wish to expose will contain the SqlFunction
attribute as described above, will be public, and also be marked as
static. Here are what they look like.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;[SqlFunction()]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Encrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;keyGen&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createKeyGen(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createEncryptor(keyGen);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformed&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__transform(Encoding.Default.GetBytes(Input),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Convert.ToBase64String(transformed);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;[SqlFunction()]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Decrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;keyGen&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createKeyGen(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createDecryptor(keyGen);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformed&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__transform(Convert.FromBase64String(Input),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encoding.Default.GetString(transformed);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clearly these methods are higher level and depend on other methods to do
the actual dirty work, but they are the methods that will be exposed to
SQL Server, and will serve to describe what is happening.&lt;/p&gt;

&lt;p&gt;Each method takes three arguments. The first is an input string. For the
&lt;strong&gt;Encrypt&lt;/strong&gt; method this will be the plain text value that needs to be
encrypted. For the &lt;strong&gt;Decrypt&lt;/strong&gt; method this will be the base64 encoded
encrypted string that needs to be decrypted. The &lt;em&gt;Password&lt;/em&gt; argument is
the password that will be used to generate the encryption and decrypt
values, followed by the &lt;em&gt;Salt&lt;/em&gt; value used along with the &lt;em&gt;Password&lt;/em&gt; to
generate the encryption key.&lt;/p&gt;

&lt;p&gt;As seen in the code above there are four primary methods used to perform
these actions: &lt;strong&gt;__createKeyGen&lt;/strong&gt;, &lt;strong&gt;__createEncryptor&lt;/strong&gt;,
&lt;strong&gt;__createDecryptor&lt;/strong&gt;, and &lt;strong&gt;__transform&lt;/strong&gt;. Let&amp;rsquo;s look at each.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createKeyGen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encoding.Default.GetBytes(Salt));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;__createKeyGen&lt;/strong&gt; method takes a password and salt values to
create a key generator object based on the RFC 2989 specification. This
will be used by the encryptor and decryptor to generate the key and
initialization vector (IV).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createEncryptor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES.Create();&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider.CreateEncryptor(KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;__createEncryptor&lt;/strong&gt; method creates an object used to encrypt
values based on the encryption provider, which in this case is
TripleDES. Notice how this method expects a Rfc2989DeriveBytes object
which we generate from the &lt;strong&gt;__createKeyGen&lt;/strong&gt;, and that we use it to
generate a 128-bit (16 bytes) key and IV.&lt;/p&gt;

&lt;p&gt;The same applies to the &lt;strong&gt;__createDecryptor&lt;/strong&gt; method, except that we
create an object that decrypts instead of encrypts.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createDecryptor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES.Create();&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider.CreateDecryptor(KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now comes the fun part. Time to perform encryption or decryption.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__transform&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Transformer)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ms&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream();&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result;&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStream(ms,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Transformer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStreamMode.Write);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.Write(Input,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.FlushFinalBlock();&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.Position&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.ToArray();&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.Close();&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.Close();&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This method takes a byte array for the input, and an encryptor or
decryptor (thus the ICryptoTransform interface argument). Right out of
the box we create a MemoryStream object. This is where the final
encrypted or decrypted result will be stored. We also create a byte
array called &lt;em&gt;result&lt;/em&gt; that we will get an array of bytes from the
MemoryStream into to send back as the result.&lt;/p&gt;

&lt;p&gt;From here we create an instance of the CryptoStream class and we will
call it &lt;em&gt;writer&lt;/em&gt;. The first parameter specifies that the MemoryStream
&lt;em&gt;ms&lt;/em&gt; will be where the CryptoStream writer will put its data. The second
parameter is the encryptor or decryptor object. The third parameter
specifies that we wish to write to the MemoryStream.&lt;/p&gt;

&lt;p&gt;From here we use the &lt;strong&gt;Write&lt;/strong&gt; method, passing it the input byte array,
start offset, and byte array length, to write the bytes to the
CryptoStream writer to be encrypted or decrypted.&lt;/p&gt;

&lt;p&gt;After this we reset our MemoryStream position, and read the data from it
into a byte array, which will be the resulting encrypted or decrypted
value. Close up shop to clean up, and return the results.&lt;/p&gt;

&lt;p&gt;It is worth noting that the &lt;strong&gt;Encrypt&lt;/strong&gt; method converts the encrypted
byte array to a Base64 string for portability, and the &lt;strong&gt;Decrypt&lt;/strong&gt;
method expects a Base64 encoded string to decrypt.&lt;/p&gt;

&lt;p&gt;Now we get to plug it into SQL Server. For your database there is a
branch in the Object Explorer named &amp;ldquo;Programmability&amp;rdquo;. Under here there
is a branch named &amp;ldquo;Assemblies&amp;rdquo;. After you compile your code you will
need to register your assembly in SQL Server. To do this, right click on
the Assemblies folder and select &amp;ldquo;New Assembly&amp;hellip;&amp;rdquo;. The resulting dialog
will have a Path option where you can browse for your compiled DLL file.
Find this, then click &amp;ldquo;Ok&amp;rdquo;. If all is well you will see your DLL name
under the &amp;ldquo;Assemblies&amp;rdquo; folder.&lt;/p&gt;

&lt;p&gt;Now you need to create an actual SQL Server function wrapper for the CLR
function. For the sake of this bit of code let&amp;rsquo;s assume the name of the
assembly is &amp;ldquo;MyCrypto&amp;rdquo;, and the name of the class is &amp;ldquo;Crypto&amp;rdquo;. This can
be done like so.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FUNCTION&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encrypt(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;RETURNS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;EXTERNAL&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MyCrypto.Crypto.Encrypt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FUNCTION&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encrypt(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;RETURNS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nvarchar(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;EXTERNAL&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MyCrypto.Crypto.Decrypt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This bit of SQL will create SQL Server functions that reference the .NET
assembly. To use this function would look something like this.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dbo.Encrypt(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;some important value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;myPassword&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;salt is nice&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;encryptedValue;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And there you have it. A cool, powerful feature, and not hard to do!
Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.IO;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Data.SqlTypes;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Microsoft.SqlServer.Server;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Security.Cryptography;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Crypto&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;	[SqlFunction()]&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Encrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;keyGen&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createKeyGen(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createEncryptor(keyGen);&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformed&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__transform(Encoding.Default.GetBytes(Input),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer);&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Convert.ToBase64String(transformed);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;	[SqlFunction()]&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Decrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;keyGen&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createKeyGen(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__createDecryptor(keyGen);&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformed&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__transform(Convert.FromBase64String(Input),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;transformer);&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encoding.Default.GetString(transformed);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;	[SqlFunction()]&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Hash&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Input&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder();&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA1.Create();&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider.ComputeHash(Encoding.Default.GetBytes(Input));&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Byte&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__result)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;result.Append(String.Format(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{0:x2}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b));&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result.ToString();&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createKeyGen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Salt)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Rfc2898DeriveBytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Password,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Encoding.Default.GetBytes(Salt));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createEncryptor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES.Create();&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider.CreateEncryptor(KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__createDecryptor&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Rfc2898DeriveBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TripleDES.Create();&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;provider.CreateDecryptor(KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;KeyGen.GetBytes(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__transform&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ICryptoTransform&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Transformer)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ms&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream();&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result;&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStream(ms,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Transformer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CryptoStreamMode.Write);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.Write(Input,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Input.Length);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.FlushFinalBlock();&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.Position&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.ToArray();&lt;/span&gt;

		&lt;span style=&#34;color: #f8f8f2&#34;&gt;ms.Close();&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;writer.Close();&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;result;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Images in SQL</title>
      <link>http://adampresley.com/post/images-in-sql/</link>
      <pubDate>Mon, 09 Feb 2009 11:21:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/images-in-sql/</guid>
      <description>&lt;p&gt;So I was presented with a task today of extracting images that were
stored in a Microsoft SQL Server 2000 database and save them as JPEG
files. Here is a bit of code that will do this. In this code sample I am
assuming domain authenticated SQL login. The table name here will be
called &lt;strong&gt;Photos&lt;/strong&gt; and the column names &lt;strong&gt;id&lt;/strong&gt;, &lt;strong&gt;type&lt;/strong&gt;, and &lt;strong&gt;photo&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SqlConnection&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SqlCommand&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;command;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SqlDataReader&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputDirectory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;C:\\TestLocation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;PictureBox&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pic&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PictureBox();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(connection&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SqlConnection(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;data source=MyServer;initial catalog=Database;persist security info=True;packet size=4096;Trusted_Connection=True&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection.Open();&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SqlCommand(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SELECT id, type, photo FROM Photos&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;command.CommandType&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CommandType.Text;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;command.CommandTimeout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;command.ExecuteReader();&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(reader.Read())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rawBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[])&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;photo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;memStream&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MemoryStream();&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;memStream.Write(rawBytes,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rawBytes.Length);&lt;/span&gt;

          &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;outputDirectory&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\\image-&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].ToString()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reader[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].ToString()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.jpg&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

          &lt;span style=&#34;color: #f8f8f2&#34;&gt;pic.Image&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Image.FromStream(memStream);&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;pic.Image.Save(filename,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Drawing.Imaging.ImageFormat.Jpeg);&lt;/span&gt;

          &lt;span style=&#34;color: #f8f8f2&#34;&gt;memStream.Close();&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
       &lt;span style=&#34;color: #66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ex)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This C# code will loop over a record set and save the images stored in
the table as JPEG files. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Change the Owner of a SQL 2005 Table</title>
      <link>http://adampresley.com/post/how-to-change-the-owner-of-a-sql-2005-table/</link>
      <pubDate>Tue, 09 Dec 2008 10:34:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/how-to-change-the-owner-of-a-sql-2005-table/</guid>
      <description>&lt;p&gt;It isn&amp;rsquo;t often that I need such a thing, but occasionally I get asked by
an engineer to change the owner of a database table in MS SQL 2005. This
happens sometimes, though I cannot always remember how, but changing the
owner of a table is pretty easy. Just execute the following script,
making sure you are logged in as &amp;ldquo;sa&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sp_changeObjectOwner&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;originalObjectOwnerAndName&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;newOwner&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, if the object name is &amp;ldquo;MyTable1&amp;rdquo;, and is owned by
&amp;ldquo;DOMAIN1\User1&amp;rdquo;, and you wish it to simply be &amp;ldquo;dbo&amp;rdquo;, then you would do
the following:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sp_changeObjectOwner&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;DOMAIN1\User1.MyTable1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dbo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Pretty simple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Foray into Java</title>
      <link>http://adampresley.com/post/foray-into-java/</link>
      <pubDate>Wed, 28 Feb 2007 04:00:00 +0000</pubDate>
      
      <guid>http://adampresley.com/post/foray-into-java/</guid>
      <description>&lt;p&gt;So recently I&amp;rsquo;ve decided to delve into the world of Java development,
or, more specifically, desktop Java development. So far I am liking it.
My first task was to write a small application that would accept two
dates as input and spit out a tab-separated report of first and last
journal entries in a system, broken down by each day. Turned out to be a
good learning experience, and useful to my bosses. :)&lt;/p&gt;

&lt;p&gt;So if you&amp;rsquo;ve ever wanted to know how to connect to and use a Microsoft
SQL Server 2000 box in Java, perhaps you will find this useful. First
thing to do? Download the Microsoft JDBC Type 4 driver &lt;a href=&#34;http://www.microsoft.com/downloads/details.aspx?FamilyID=86212d54-8488-481d-b46b-af29bb18e1e5&amp;amp;DisplayLang=en&#34;&gt;here&lt;/a&gt;. You
don&amp;rsquo;t need the setup program, just the JAR files. So extract those to a
location you can remember.&lt;/p&gt;

&lt;p&gt;Now for my development I am using NetBeans 5.5. I highly recommend this
product. Not only does it &lt;strong&gt;ROCK&lt;/strong&gt;, but it is &lt;strong&gt;FREE&lt;/strong&gt;! To get SQL 2000
working in your Java app you will need to add the SQL 2000 JAR files
into your project classpath settings in NetBeans. Once you have done
this, here is how you can connect to and read records from a table in
Microsoft SQL Server 2000.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DriverManager&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;registerDriver&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SQLServerDriver&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DriverManager&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;jdbc:microsoft:sqlserver://localhost:1433;databaseName=MyDb&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;userName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;PreparedStatement&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;qry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;prepareStatement&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SELECT * FROM myTable&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ResultSet&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;qry&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;someValue1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;someColumn1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;someValue2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getDate&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;someColumn2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;qry&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;connection&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously you will need to import the correct packages and such, but you
get the idea.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>